package com.nvcomputers.ten.views.post;

import android.app.Dialog;
import android.content.Context;
import android.content.CursorLoader;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.media.MediaMetadataRetriever;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.support.annotation.NonNull;
import android.support.v4.app.Fragment;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.util.Log;
import android.view.View;
import android.webkit.MimeTypeMap;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.adobe.creativesdk.aviary.AdobeImageIntent;
import com.bumptech.glide.Glide;
import com.bumptech.glide.load.engine.DiskCacheStrategy;
import com.bumptech.glide.request.animation.GlideAnimation;
import com.bumptech.glide.request.target.SimpleTarget;
import com.nvcomputers.ten.R;
import com.nvcomputers.ten.adapter.SuggestionFollowingAdapter;
import com.nvcomputers.ten.api.GetRestAdapter;
import com.nvcomputers.ten.imagechooser.api.ChooserType;
import com.nvcomputers.ten.imagechooser.api.ChosenImage;
import com.nvcomputers.ten.imagechooser.api.ChosenImages;
import com.nvcomputers.ten.imagechooser.api.ChosenVideo;
import com.nvcomputers.ten.imagechooser.api.ChosenVideos;
import com.nvcomputers.ten.imagechooser.api.ImageChooserListener;
import com.nvcomputers.ten.imagechooser.api.ImageChooserManager;
import com.nvcomputers.ten.interfaces.AppCommonCallback;
import com.nvcomputers.ten.model.output.EditProfileResponse;
import com.nvcomputers.ten.model.output.SearchFollowingUserResponse;
import com.nvcomputers.ten.presenter.SearchFollowingPresenter;
import com.nvcomputers.ten.utils.FileUtils;
import com.nvcomputers.ten.utils.HttpUtils;
import com.nvcomputers.ten.utils.PreferenceKeys;
import com.nvcomputers.ten.utils.ProgressUtility;
import com.nvcomputers.ten.utils.SharedPrefsHelper;
import com.nvcomputers.ten.utils.Utilities;
import com.nvcomputers.ten.views.core.BaseFragment;
import com.nvcomputers.ten.views.core.CarouselPagerFragment;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;
import java.util.StringTokenizer;

import jp.wasabeef.glide.transformations.RoundedCornersTransformation;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

import static android.app.Activity.RESULT_OK;

public class AddPostFragment extends BaseFragment implements View.OnClickListener, ImageChooserListener, AppCommonCallback, SearchFollowingPresenter.SearchFollowingCallback {

    private static final int IMAGE_EDITER = 125;
    private static final int REQUEST_Storage = 1;
    private static final int REQUEST_CAMERA = 0;
    private static final int TRIM_VIDEO_CODE = 345;

    private ImageView userImage, cameraIcon, galleryIcon, crossImage;
    private TextView userName, postTime;
    private Button postBtn;
    private View mLayout;
    private RelativeLayout iconsLayout, imageLayout;
    private ImageChooserManager imageChooserManager;
    private String filePath, originalFilePath, thumbnailSmallFilePath;
    private boolean isActivityResultOver;
    private ImageView postImage, selectedThumbImg;
    //private byte[] byteArray;
    private byte[] videoThumbImageByteArray;
    private File destinationFile;
    private String descriptionString = "";
    private File imageFile;
    private boolean isDataLoaded;
    private SharedPrefsHelper mSharedPrefsHelper;
    private TextView captionCount;
    private ProgressBar image_loader;
    private String userId;
    private SuggestionFollowingAdapter followingListAdapter;
    private RecyclerView suggestionRV;
    private Uri originalVideoUri;
    private Uri croppedVideoUri;

    public AddPostFragment() {
        // Required empty public constructor
    }

    @Override
    public void onAttachFragment(Fragment childFragment) {
        super.onAttachFragment(childFragment);

    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }


    @Override
    protected int getLayoutId() {
        return R.layout.fragment_add_post;
    }

    @Override
    protected void initViews(View view) {
        mSharedPrefsHelper = new SharedPrefsHelper(getBaseActivity());
        String username = mSharedPrefsHelper.get(PreferenceKeys.PREF_USER_NAME);
        userId = mSharedPrefsHelper.get(PreferenceKeys.PREF_USER_ID);
        userName = (TextView) view.findViewById(R.id.user_name);
        if (!TextUtils.isEmpty(username)) {
            userName.setText(username);
        }
        image_loader = (ProgressBar) view.findViewById(R.id.image_loader);
        mLayout = view.findViewById(R.id.post_add_layout);
        userImage = (ImageView) view.findViewById(R.id.user_img);
        cameraIcon = (ImageView) view.findViewById(R.id.camera_icon);
        galleryIcon = (ImageView) view.findViewById(R.id.gallery_icon);
        postTime = (TextView) view.findViewById(R.id.post_time);
        selectedThumbImg = (ImageView) view.findViewById(R.id.thumnail_img);
        iconsLayout = (RelativeLayout) view.findViewById(R.id.icons_layout);
        imageLayout = (RelativeLayout) view.findViewById(R.id.showImageRelate);
        edit_text_comment = (EditText) view.findViewById(R.id.caption);

        postBtn = (Button) view.findViewById(R.id.postBtn);
        postImage = (ImageView) findViewById(R.id.thumnail_img);
        crossImage = (ImageView) findViewById(R.id.cross_img);
        cameraIcon.setOnClickListener(this);
        galleryIcon.setOnClickListener(this);
        postBtn.setOnClickListener(this);
        crossImage.setOnClickListener(this);
        mLayout.setOnClickListener(this);
        captionCount = (TextView) findViewById(R.id.characterCount);

        Glide.with(this)
                .load(HttpUtils.getProfileImageURL(username))
                .bitmapTransform(new RoundedCornersTransformation(getBaseActivity(), 20, 15))
                .diskCacheStrategy(DiskCacheStrategy.NONE)
                .skipMemoryCache(true)
                .into(userImage);

        edit_text_comment.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {

            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
                if (charSequence != null && charSequence.length() > 0) {
                    postBtn.setBackground(getBaseActivity().getResources().getDrawable(R.drawable.postselected));
                } else {
                    if (!isDataLoaded)
                        postBtn.setBackground(getBaseActivity().getResources().getDrawable(R.drawable.post));
                }
                String comment = edit_text_comment.getText().toString().trim();
                if (!TextUtils.isEmpty(comment)) {
                    if (comment.contains("@")) {

                        if (comment.length() > 1) {
                            int index = comment.indexOf("@");
                            Log.e("index--", index + "");
                            StringTokenizer stringTokenizer = new StringTokenizer(comment, "@");
                            if (index == 0) {
                                if (stringTokenizer.hasMoreTokens()) {
                                    String first = stringTokenizer.nextToken();
                                    Log.e("first--", first);
                                    hitFollowingSuggestionsApi(first, index);
                                }
                            } else {
                                if (stringTokenizer.hasMoreTokens()) {
                                    String first = stringTokenizer.nextToken();
                                    Log.e("first--", first);
                                }
                                if (stringTokenizer.hasMoreTokens()) {
                                    String last = stringTokenizer.nextToken();
                                    hitFollowingSuggestionsApi(last, index);
                                    Log.e("last--", last);
                                }
                            }
                        }
                    }
                }
                int textLength = edit_text_comment.getText().toString().trim().length();
                int viewText = 250 - textLength;
                captionCount.setText(viewText + "".trim());

            }


            @Override
            public void afterTextChanged(Editable editable) {
            }
        });

    }

    private void hitFollowingSuggestionsApi(String suggestion, int index) {
        Log.e("suggesstion--", suggestion);
        if (Utilities.checkInternet(getBaseActivity())) {
            SearchFollowingPresenter searchFollowingPresenter = new SearchFollowingPresenter(this, this);
            searchFollowingPresenter.responseCheck(userId, suggestion);
        } else {
            showToast(R.string.no_internet_msg);
        }
    }

    @Override
    public void onResume() {
        super.onResume();

        if (CameraUploadActivity.editedImageUri != null) {

            iconsLayout.setVisibility(View.INVISIBLE);
            imageLayout.setVisibility(View.VISIBLE);
            String picturePath = (getRealPathFromURI(mContext, CameraUploadActivity.editedImageUri));
            imageFile = new File(picturePath);

            Glide.with(AddPostFragment.this)
                    .load(CameraUploadActivity.editedImageUri)
                    .asBitmap()
                    .into(target);
        } else if (CameraUploadActivity.croppedVideoUri != null) {
            croppedVideoUri = CameraUploadActivity.croppedVideoUri;
            int currentPos = CameraUploadActivity.currentPosition;
            CameraUploadActivity.croppedVideoUri = null;
            CameraUploadActivity.currentPosition = 0;
            setVideoImage(currentPos);
        }
    }

    public static String getRealPathFromURI(Context context, Uri contentUri) {
        String[] proj = {MediaStore.Images.Media.DATA};
        String result = null;

        CursorLoader cursorLoader = new CursorLoader(
                context,
                contentUri, proj, null, null, null);
        Cursor cursor = cursorLoader.loadInBackground();

        if (cursor != null) {
            int column_index =
                    cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
            cursor.moveToFirst();
            result = cursor.getString(column_index);
        }
        return result;
    }

    @Override
    public void dispose() {

    }

    @Override
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.post_add_layout:
                Utilities.hideKeypad(view);
                break;
            case R.id.camera_icon:
                // cameraPermission();
                //permission
                Intent intent = new Intent(mContext, CameraUploadActivity.class);
                startActivity(intent);

                break;
            case R.id.gallery_icon:
                //chooseImage();
                openGallery();
                break;
            case R.id.postBtn:
                Utilities.hideKeypad(view);
                if (originalVideoUri != null && croppedVideoUri != null) {
                    uploadImageVideo(true);
                } else if (imageFile != null || !edit_text_comment.getText().toString().equals("")) {
                    uploadImageVideo(false);
                } else {
                    showToast("Please select image or enter caption to post data");
                }
                break;
            case R.id.cross_img:
                //To-do
                String caption = edit_text_comment.getText().toString().trim();
                if (TextUtils.isEmpty(caption)) {
                    postBtn.setBackground(getBaseActivity().getResources().getDrawable(R.drawable.post));
                }
                isDataLoaded = false;
                CameraUploadActivity.editedImageUri = null;
                iconsLayout.setVisibility(View.VISIBLE);
                imageLayout.setVisibility(View.GONE);
                Glide.with(AddPostFragment.this)
                        .load("")
                        .into(selectedThumbImg);
                break;

        }
    }

    private void openGallery() {
        Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
        intent.setType("image/* video/*");
        startActivityForResult(intent, ChooserType.REQUEST_PICK_PICTURE_OR_VIDEO);
    }

    private byte[] convertThumbBitmapToByteArray(Bitmap thumbnailImg) {
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        thumbnailImg.compress(Bitmap.CompressFormat.JPEG, 80, stream);
        byte[] myByteArray = stream.toByteArray();
        return myByteArray;
    }

    private void uploadImageVideo(boolean isVideo) {

        ProgressUtility.showProgress(getBaseActivity(), getString(R.string.please_wait_meassge));

        descriptionString = edit_text_comment.getText().toString();
        RequestBody description = RequestBody.create(okhttp3.MultipartBody.FORM, descriptionString);
        Call<EditProfileResponse> response = null;
        if (isVideo) {
            Bitmap thumbnailImg = mBitmap;//ThumbnailUtils.createVideoThumbnail((TTApplication.recordedVideoPath), MediaStore.Images.Thumbnails.MINI_KIND);
            byte[] videoThumbImageByteArray = convertThumbBitmapToByteArray(thumbnailImg);
            RequestBody requestBody = RequestBody.create(MediaType.parse("image/jpeg"), videoThumbImageByteArray);
            MultipartBody.Part imageFilePart = MultipartBody.Part.createFormData("videoPoster", "videoThumb.jpeg", requestBody);
            File videoFile = new File(croppedVideoUri.toString());
            RequestBody videoRequestBody = RequestBody.create(MediaType.parse("video/mp4"), videoFile);
            MultipartBody.Part videoFilePart = MultipartBody.Part.createFormData("imageFile", videoFile.getName(), videoRequestBody);
            response = GetRestAdapter.getRestAdapter(true).uploadVideoPost(description, imageFilePart, videoFilePart);
        } else if (imageFile == null) {
            response = GetRestAdapter.getRestAdapter(true).uploadTextPost(description);
        } else {
            String uriType = "image/png";
            Bitmap.CompressFormat formatType = Bitmap.CompressFormat.PNG;
            if (imageFile.getPath().contains("jpeg")) {
                uriType = "image/jpeg";
                formatType = Bitmap.CompressFormat.JPEG;
            } else if (imageFile.getPath().contains("jpg")) {
                uriType = "image/jpg";
                formatType = Bitmap.CompressFormat.JPEG;
            }
            ByteArrayOutputStream stream = new ByteArrayOutputStream();
            mBitmap.compress(formatType, 50, stream);
            byte[] byteArray = stream.toByteArray();
            RequestBody requestBody = RequestBody.create(MediaType.parse(uriType), byteArray);
            MultipartBody.Part filePart = MultipartBody.Part.createFormData("imageFile", imageFile.getName(), requestBody);
            response = GetRestAdapter.getRestAdapter(true).uploadImagePost(description, filePart);
        }
        response.enqueue(new Callback<EditProfileResponse>() {
            @Override
            public void onResponse(Call<EditProfileResponse> call, retrofit2.Response<EditProfileResponse> response) {
                ProgressUtility.dismissProgress();
                if (response.code() == 200) {
                    showToast("Post Uploaded Successfully");
                    edit_text_comment.setText("");
                    CameraUploadActivity.editedImageUri = null;
                    selectedThumbImg.setImageBitmap(null);
                    if (imageFile != null && imageFile.exists()) {
                        imageFile.delete();
                    }
                    iconsLayout.setVisibility(View.VISIBLE);
                    imageLayout.setVisibility(View.GONE);
                    imageFile = null;
                    //TODO
                    moveToHomeFragment();
                } else {
                    showToast("" + response.message());
                }
            }

            @Override
            public void onFailure(Call<EditProfileResponse> call, Throwable t) {
                ProgressUtility.dismissProgress();
                showToast(t.getMessage());
            }
        });
    }

    private void moveToHomeFragment() {
        Fragment parentFragmemt = getParentFragment();
        if (parentFragmemt instanceof CarouselPagerFragment) {
            CarouselPagerFragment carouselPagerFragment = (CarouselPagerFragment) parentFragmemt;
            carouselPagerFragment.updatePage(0);
            carouselPagerFragment.updateButtonUI();
        }
    }


    private void chooseImage() {
        //chooserType = ChooserType.REQUEST_PICK_PICTURE_OR_VIDEO;
        imageChooserManager = new ImageChooserManager(this,
                ChooserType.REQUEST_PICK_PICTURE_OR_VIDEO, false) {
            @Override
            public void onProcessedVideo(ChosenVideo video) {


            }

            @Override
            public void onProcessedVideos(ChosenVideos videos) {

            }
        };

        imageChooserManager.setImageChooserListener(this);
        imageChooserManager.clearOldFiles();
        try {
            filePath = imageChooserManager.choose();
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    @Override
    public void onImageChosen(final ChosenImage image) {
        getActivity().runOnUiThread(new Runnable() {

            @Override
            public void run() {
                Log.i(TAG, "Chosen Image: O - " + image.getFilePathOriginal());
                Log.i(TAG, "Chosen Image: T - " + image.getFileThumbnail());
                Log.i(TAG, "Chosen Image: Ts - " + image.getFileThumbnailSmall());
                isActivityResultOver = true;
                originalFilePath = image.getFilePathOriginal();
                //thumbnailFilePath = image.getFileThumbnail();
                thumbnailSmallFilePath = image.getFilePathOriginal();
                //pbar.setVisibility(View.GONE);
                if (image != null) {
                    Log.i(TAG, "Chosen Image: Is not null");
                    loadImage(postImage, image.getFilePathOriginal());

                } else {
                    Log.i(TAG, "Chosen Image: Is null");
                }
            }
        });
    }

    @Override
    public void onError(final String reason) {
        getActivity().runOnUiThread(new Runnable() {

            @Override
            public void run() {
                Log.i(TAG, "OnError: " + reason);
                //pbar.setVisibility(View.GONE);
                Toast.makeText(getActivity(), reason,
                        Toast.LENGTH_LONG).show();
            }
        });
    }

    @Override
    public void onImagesChosen(final ChosenImages images) {
        getActivity().runOnUiThread(new Runnable() {
            @Override
            public void run() {
                Log.i(TAG, "On Images Chosen: " + images.size());
                onImageChosen(images.getImage(0));
            }
        });
    }

    private void loadImage(ImageView iv, final String path) {
        //get image bitmap to get image code
        if (path != null && path.length() > 0) {
            Glide.with(mContext)
                    .load(path)
                    .into(postImage);
        }
    }

    private void reinitializeImageChooser() {
        imageChooserManager = new ImageChooserManager(this, ChooserType.REQUEST_PICK_PICTURE_OR_VIDEO, true) {
            @Override
            public void onProcessedVideo(ChosenVideo video) {

            }

            @Override
            public void onProcessedVideos(ChosenVideos videos) {

            }
        };
        Bundle bundle = new Bundle();
        bundle.putBoolean(Intent.EXTRA_ALLOW_MULTIPLE, true);
        imageChooserManager.setExtras(bundle);
        imageChooserManager.setImageChooserListener(this);
        imageChooserManager.reinitialize(filePath);
    }

    @Override
    public void onSaveInstanceState(Bundle outState) {
        Log.i(TAG, "Saving Stuff");
        Log.i(TAG, "File Path: " + filePath);
        //Log.i(TAG, "Chooser Type: " + chooserType);
        outState.putBoolean("activity_result_over", isActivityResultOver);
        //outState.putInt("chooser_type", chooserType);
        outState.putString("media_path", filePath);
        outState.putString("orig", originalFilePath);
        outState.putString("thumbs", thumbnailSmallFilePath);
        super.onSaveInstanceState(outState);
    }


    //@Override
    protected void onRestoreInstanceState(@NonNull Bundle savedInstanceState) {
        if (savedInstanceState != null) {
            /*if (savedInstanceState.containsKey("chooser_type")) {
                chooserType = savedInstanceState.getInt("chooser_type");
            }*/
            if (savedInstanceState.containsKey("media_path")) {
                filePath = savedInstanceState.getString("media_path");
            }
            if (savedInstanceState.containsKey("activity_result_over")) {
                isActivityResultOver = savedInstanceState.getBoolean("activity_result_over");
                originalFilePath = savedInstanceState.getString("orig");
                thumbnailSmallFilePath = savedInstanceState.getString("thumbs");
            }
        }
        Log.i(TAG, "Restoring Stuff");
        Log.i(TAG, "File Path: " + filePath);
        //Log.i(TAG, "Chooser Type: " + chooserType);
        Log.i(TAG, "Activity Result Over: " + isActivityResultOver);
        if (isActivityResultOver) {
            populateData();
        }
        //super.onRestoreInstanceState(savedInstanceState);
    }

    private void populateData() {
        Log.i(TAG, "Populating Data");
        //loadImage(imageViewThumbnail, thumbnailFilePath);
        loadImage(postImage, thumbnailSmallFilePath);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == RESULT_OK) {

            Log.i(TAG, "File Path : " + filePath);
            //Log.i(TAG, "Chooser Type: " + chooserType);

            if (requestCode == ChooserType.REQUEST_PICK_PICTURE_OR_VIDEO || requestCode == ChooserType.REQUEST_PICK_PICTURE) {

                if (data != null && data.getData() != null) {
                    Uri uri = data.getData();
                    handleUri(uri);
                } else {
                    Uri uri = Uri.fromFile(new File(filePath));
                    if (uri != null) {
                        handleUri(uri);
                    } else {
                        if (imageChooserManager == null) {
                            reinitializeImageChooser();
                        }
                        imageChooserManager.submit(requestCode, data);
                    }
                }
            } else if (requestCode == IMAGE_EDITER) {
                iconsLayout.setVisibility(View.GONE);
                imageLayout.setVisibility(View.VISIBLE);
                Uri editedImageUri = data.getParcelableExtra(AdobeImageIntent.EXTRA_OUTPUT_URI);
                String path = FileUtils.getPath(getContext(), editedImageUri);
                Log.d("====", "==SSSSSS===" + path);
                isDataLoaded = true;
                postBtn.setBackground(getBaseActivity().getResources().getDrawable(R.drawable.postselected));
                //editedImageUri = data.getData();
                Glide.with(AddPostFragment.this)
                        .load(editedImageUri)
                        .asBitmap()
                        .into(target);

            } else if (requestCode == TRIM_VIDEO_CODE) {
                iconsLayout.setVisibility(View.GONE);
                imageLayout.setVisibility(View.VISIBLE);
                croppedVideoUri = data.getData();
                int currentPosition = data.getIntExtra("position", 0);
                setVideoImage(currentPosition);
            }

        }
    }

    private void setVideoImage(int currentPosition) {
        MediaMetadataRetriever mediaMetadataRetriever = new MediaMetadataRetriever();
        mediaMetadataRetriever.setDataSource(mContext, originalVideoUri);
        Bitmap bitmap = mediaMetadataRetriever.getFrameAtTime(currentPosition, MediaMetadataRetriever.OPTION_CLOSEST_SYNC);
        Log.d("", currentPosition + "===>" + bitmap);
        isDataLoaded = true;
        postBtn.setBackground(mContext.getResources().getDrawable(R.drawable.postselected));
        mBitmap = bitmap;
        selectedThumbImg.setImageBitmap(bitmap);
        image_loader.setVisibility(View.GONE);
    }


    private Bitmap mBitmap;
    private SimpleTarget target = new SimpleTarget<Bitmap>() {
        @Override
        public void onResourceReady(final Bitmap bitmap, GlideAnimation glideAnimation) {
            // do something with the bitmap
            // for demonstration purposes, let's just set it to an ImageView
            mBitmap = bitmap;
            selectedThumbImg.setImageBitmap(bitmap);
            image_loader.setVisibility(View.GONE);
            Thread thread = new Thread(new Runnable() {
                @Override
                public void run() {
                    FileOutputStream out = null;
                    try {
                        String path = Environment.getExternalStorageDirectory().toString();
                        imageFile = new File(path, "TenPost" + System.currentTimeMillis() + ".jpeg");
                        out = new FileOutputStream(imageFile);
                        bitmap.compress(Bitmap.CompressFormat.JPEG, 50, out); // bmp is your Bitmap instance
                        mBitmap = bitmap;
                        // PNG is a lossless format, the compression factor (100) is ignored
                    } catch (Exception e) {
                        e.printStackTrace();
                    } finally {
                        try {
                            if (out != null) {
                                out.close();
                            }
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
            });
            thread.start();
        }
    };

    private void handleUri(Uri mSelectedImageUri) {
        if (mSelectedImageUri == null) {
            Log.i("MainActivity", "imageUri is null");
        }
        String realPath = FileUtils.getPath(mContext, mSelectedImageUri);
        String extension = MimeTypeMap.getFileExtensionFromUrl(realPath);
        String fileFormatType = "";
        if (extension != null && !extension.equals("")) {
            fileFormatType = MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension);
        }
        if (fileFormatType.contains("Image") || fileFormatType.contains("image")) {
            Intent imageEditorIntent = new AdobeImageIntent.Builder(this.getActivity())
                    .setData(mSelectedImageUri)
                    .build();
            startActivityForResult(imageEditorIntent, IMAGE_EDITER);
        } else if (fileFormatType.contains("Video") || fileFormatType.contains("video")) {
            originalVideoUri = mSelectedImageUri;
            Intent intent = new Intent(getBaseActivity(), VideoTrimmerActivity.class);
            intent.putExtra("REAL_VIDEO_PATH", realPath);
            startActivityForResult(intent, TRIM_VIDEO_CODE);
        }
    }

    @Override
    public void setProgressBar() {

    }

    @Override
    public void dismiss() {

    }

    private void showSuggestionDialog() {
        mSuggestionDialog = new Dialog(getActivity());
        mSuggestionDialog.setContentView(R.layout.suggestion_name_layout);
        suggestionRV = (RecyclerView) mSuggestionDialog.findViewById(R.id.suggestionRV);
        LinearLayoutManager mLayoutManager = new LinearLayoutManager(getActivity());
        mLayoutManager.setOrientation(LinearLayoutManager.VERTICAL);
        suggestionRV.setLayoutManager(mLayoutManager);
    }

    @Override
    public void searchFollowingnError(Call<SearchFollowingUserResponse> call, Throwable t) {
        Utilities.showMessage(getActivity(), getString(R.string.server_error_msg));
    }

    @Override
    public void onSearchFollowingSuccess(Response<SearchFollowingUserResponse> response) {
        SearchFollowingUserResponse body = response.body();
        if (body != null) {
            List<SearchFollowingUserResponse.Users> usersDataList = body.getUsers();
            if (mSuggestionDialog == null)
                showSuggestionDialog();

            if (usersDataList == null || usersDataList.size() == 0) {
                mSuggestionDialog.dismiss();
                return;
            }
            mSuggestionDialog.dismiss();
            mSuggestionDialog.show();
            followingListAdapter = new SuggestionFollowingAdapter(this, usersDataList);
            suggestionRV.setAdapter(followingListAdapter);
        } else {
            Utilities.showMessage(getActivity(), getString(R.string.server_error_msg));
        }
    }
}
