package com.nvcomputers.ten.adapter;

import android.app.Activity;
import android.os.Bundle;
import android.support.v4.content.ContextCompat;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.engine.DiskCacheStrategy;
import com.bumptech.glide.signature.StringSignature;
import com.nvcomputers.ten.R;
import com.nvcomputers.ten.model.output.NewsFeedOutput;
import com.nvcomputers.ten.model.output.NotificationLitResponse;
import com.nvcomputers.ten.utils.DateTimeUtil;
import com.nvcomputers.ten.utils.HttpUtils;
import com.nvcomputers.ten.utils.PreferenceKeys;
import com.nvcomputers.ten.utils.SharedPrefsHelper;
import com.nvcomputers.ten.utils.Utilities;
import com.nvcomputers.ten.views.notification.NotificationFragment;

import java.util.ArrayList;
import java.util.List;

import jp.wasabeef.glide.transformations.RoundedCornersTransformation;

/**
 * Created by Thaparsneh on 4/26/2017.
 */

public class NotificationListAdapter extends RecyclerView.Adapter<NotificationListAdapter.NotificationViewHolder> {
    private final Activity mActivity;
    private final List<NotificationLitResponse.Notifications> notificationList;
    private final SharedPrefsHelper sharedPref;
    private final LinearLayoutManager mLinearManager;
    NotificationFragment notificationFragment;
    private int listCount;

    public NotificationListAdapter(NotificationFragment landingScreen, List<NotificationLitResponse.Notifications> arrayList, LinearLayoutManager linearLayoutManager) {
        this.mActivity = landingScreen.getActivity();
        this.notificationFragment = landingScreen;
        this.notificationList = arrayList;
        mLinearManager = linearLayoutManager;
        if (notificationList != null) {
            listCount = notificationList.size();
        }
        sharedPref = new SharedPrefsHelper(mActivity);
    }

    @Override
    public NotificationViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View itemView = LayoutInflater.
                from(parent.getContext()).
                inflate(R.layout.row_notification_layout, parent, false);
        return new NotificationViewHolder(itemView);
    }


    @Override
    public void onBindViewHolder(NotificationViewHolder holder, int position) {
        NotificationLitResponse.Notifications data = notificationList.get(position);
        if (data.getUser() != null) {
            String user_name = data.getUser().getUsername();
            holder.userName.setText(user_name);
            String imageTag = sharedPref.get(PreferenceKeys.PREF_IMAGE_TAG, "");
            Glide.with(mActivity)
                    .load(HttpUtils.getProfileImageURL(data.getUser().getUsername()))
                    .override(90, 90)
                    .bitmapTransform(new RoundedCornersTransformation(mActivity, 10, 5))
                    .placeholder(R.drawable.myprofilelarge)
                    .diskCacheStrategy(DiskCacheStrategy.RESULT)
                    .signature(new StringSignature(imageTag))
                    .into(holder.userImage);
        }
        if (data.getType() != null) {
            String noti_type = data.getType();
            if (noti_type.contains("COMMENT")) {
                holder.typeIcon.setImageResource(R.drawable.commentselected);
            } else if (noti_type.contains("LIKE")) {
                holder.typeIcon.setImageResource(R.drawable.likeselected);
            } else {
                holder.typeIcon.setImageResource(R.drawable.tabbar4selected);
            }
        }

        NewsFeedOutput.Posts postData = data.getPost();//NotificationLitResponse.Post
        if (postData != null) {
            String post_time = data.getPost().getExpiration();
            if (post_time != null) {
                if (DateTimeUtil.checkExpiration(post_time)) {
                    holder.postTime.setText(DateTimeUtil.getTopTime(post_time, data.getPost().getDatestamp()));
                    holder.postTime.setBackgroundResource(R.color.black);
                } else {
                    String expTime = DateTimeUtil.getRemainingTimeInMinutes(post_time);
                    holder.postTime.setText(expTime);
                    String xTime = expTime.substring(0, expTime.length() - 1);
                    int intTime = Integer.parseInt(xTime);
                    if (expTime.contains("s") || intTime < 5) {
                        holder.postTime.setTextColor(ContextCompat.getColor(mActivity, R.color.red_color));
                    } else if (intTime < 7) {
                        holder.postTime.setTextColor(ContextCompat.getColor(mActivity, R.color.yellow_color));
                    } else {
                        holder.postTime.setTextColor(ContextCompat.getColor(mActivity, R.color.green_color));
                    }
                }
            }
            //String post_img = data.getPost().getImage();
            Glide.with(mActivity)
                    .load(HttpUtils.getPostImageURL(postData.getIdPost()))
                    .bitmapTransform(new RoundedCornersTransformation(mActivity, 20, 15))
                    .into(holder.postIcon);

        }

        String noti_msg = data.getMessage();

        holder.notiMsg.setText(noti_msg);
        if (data.getDatestamp() != null)
            holder.notiTime.setText(DateTimeUtil.getElapseTimeInMinutes(data.getDatestamp()));

        if (position == listCount - 1) {
            notificationFragment.loadData(listCount);
        }
    }

    public void updateTimeData(NotificationViewHolder mViewHolder, int mPosition) {
        NewsFeedOutput.Posts post = notificationList.get(mPosition).getPost();
        try {
            String expTime = DateTimeUtil.getRemainingTimeInMinutes(post.getExpiration());
            if (expTime.equals("Exp")) {
                mViewHolder.postTime.setText(DateTimeUtil.getTopTime(post.getExpiration(), post.getDatestamp()));
                mViewHolder.postTime.setBackground(ContextCompat.getDrawable(mActivity, R.drawable.rounded_btn_black_filled));
                mViewHolder.postTime.setTextColor(ContextCompat.getColor(mActivity, R.color.white));
            } else {
                mViewHolder.postTime.setText(expTime);
                String xTime = expTime.substring(0, expTime.length() - 1);
                int intTime = Integer.parseInt(xTime);
                if (expTime.contains("s") || intTime < 5) {
                    mViewHolder.postTime.setTextColor(ContextCompat.getColor(mActivity, R.color.red_color));
                } else if (intTime < 7) {
                    mViewHolder.postTime.setTextColor(ContextCompat.getColor(mActivity, R.color.yellow_color));
                } else {
                    mViewHolder.postTime.setTextColor(ContextCompat.getColor(mActivity, R.color.green_color));
                }
            }
            // mViewHolder.TimeRemainingTextView.setText(DateTimeUtil.getRemainingTimeInMinutes(post.getExpiration()));
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            mViewHolder.notiTime.setText(DateTimeUtil.getElapseTimeInMinutes(post.getDatestamp()));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public int getItemCount() {
        return notificationList.size();
    }

    public void updateList() {
        try {
            int firstItemPos = mLinearManager.findFirstVisibleItemPosition();
            int lastItemPos = mLinearManager.findLastVisibleItemPosition();
            while (firstItemPos <= lastItemPos) {
                View view = mLinearManager.findViewByPosition(firstItemPos);
                NotificationViewHolder holder = (NotificationViewHolder) view.getTag();
                updateTimeData(holder, firstItemPos);
                firstItemPos++;
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public class NotificationViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {


        private final TextView userName;
        private final ImageView userImage;
        private final TextView postTime;
        private final ImageView postIcon;
        private final ImageView typeIcon;
        private final TextView notiMsg;
        private final TextView notiTime;
        private final RelativeLayout notiRow;

        public NotificationViewHolder(View itemView) {
            super(itemView);
            notiRow = (RelativeLayout) itemView.findViewById(R.id.notification_row);
            notiRow.setOnClickListener(this);
            userName = (TextView) itemView.findViewById(R.id.user_name);
            userImage = (ImageView) itemView.findViewById(R.id.user_img);
            userImage.setOnClickListener(this);
            postTime = (TextView) itemView.findViewById(R.id.post_time);
            postIcon = (ImageView) itemView.findViewById(R.id.postIcon);
            typeIcon = (ImageView) itemView.findViewById(R.id.action_img);
            notiMsg = (TextView) itemView.findViewById(R.id.action_txt);
            notiTime = (TextView) itemView.findViewById(R.id.noti_tym);
        }

        @Override
        public void onClick(View view) {
            if (Utilities.checkInternet(mActivity)) {
                int clickedPosition = getLayoutPosition();

                switch (view.getId()) {
                    case R.id.user_name:
                        if (notificationList.get(clickedPosition).getUser() != null)
                            notificationFragment.moveToProfile(notificationList.get(clickedPosition).getUser().getUsername());
                        break;
                    case R.id.user_img:
                        if (notificationList.get(clickedPosition).getUser() != null)
                            notificationFragment.moveToProfile(notificationList.get(clickedPosition).getUser().getUsername());
                        break;
                    case R.id.notification_row:
                        String type = notificationList.get(clickedPosition).getType();
                        String userName = "", userId = "";
                        if (notificationList.get(clickedPosition).getUser() != null) {
                            userName = notificationList.get(clickedPosition).getUser().getUsername();
                            userId = notificationList.get(clickedPosition).getUser().getIdUser();
                        }

                        NewsFeedOutput.Posts postData = notificationList.get(clickedPosition).getPost();// NotificationLitResponse.Post
                        String postId = "", likedValues = "";
                        String expirationTime = "", dateStamp = "", postCaption = "";
                        if (postData != null) {
                            postId = notificationList.get(clickedPosition).getPost().getIdPost();
                            likedValues = notificationList.get(clickedPosition).getPost().getLikeCount() + "";
                            expirationTime = notificationList.get(clickedPosition).getPost().getExpiration();
                            dateStamp = notificationList.get(clickedPosition).getPost().getDatestamp();
                            postCaption = notificationList.get(clickedPosition).getPost().getText();
                        }
                        String notificationId = notificationList.get(clickedPosition).getIdNotification();

                        Bundle bundle = new Bundle();
                        bundle.putString("type", type);
                        bundle.putString("postCaption", postCaption);
                        bundle.putString("username", userName);
                        bundle.putString("userId", userId);
                        bundle.putString("postId", postId);
                        bundle.putString("likedValues", likedValues);
                        bundle.putString("expirationTime", expirationTime);
                        bundle.putString("remainingTime", dateStamp);
                        bundle.putString("Back", "Notification");
                        bundle.putString("notificationId", notificationId);
                        bundle.putParcelable("post_data", notificationList.get(clickedPosition).getPost());
                        ArrayList<NewsFeedOutput.Posts> notificationPostList = new ArrayList<>();

                        for (int i = 0; i < notificationList.size(); i++) {
                            if (notificationList.get(i).getPost() != null) {
                                notificationPostList.add(notificationList.get(i).getPost());
                                if (!notificationId.equals("0") && notificationId.equals(notificationList.get(i).getIdNotification())) {
                                    clickedPosition = notificationPostList.size() - 1;
                                } else if (postId != null && postId.equals(notificationList.get(i).getPost().getIdPost())) {
                                    clickedPosition = notificationPostList.size() - 1;
                                }
                            }
                        }
                        notificationFragment.screenNaigations(notificationPostList, bundle, clickedPosition);
                        break;
                }
            } else {
                Utilities.showMessage(mActivity, mActivity.getString(R.string.no_internet_msg));
            }

        }

    }
}
