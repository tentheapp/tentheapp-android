package com.nvcomputers.ten.views.home;

import android.content.Intent;
import android.os.Bundle;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.View;
import android.widget.ImageView;
import android.widget.TextView;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.engine.DiskCacheStrategy;
import com.nvcomputers.ten.R;
import com.nvcomputers.ten.model.output.GetAllPostCommentOutput;
import com.nvcomputers.ten.presenter.GetCommentListPresenter;
import com.nvcomputers.ten.utils.HttpUtils;
import com.nvcomputers.ten.utils.PreferenceKeys;
import com.nvcomputers.ten.utils.SharedPrefsHelper;
import com.nvcomputers.ten.views.core.BaseActivity;

import java.util.ArrayList;

import jp.wasabeef.glide.transformations.RoundedCornersTransformation;
import retrofit2.Call;
import retrofit2.Response;

public class CommentsActivity extends BaseActivity implements View.OnClickListener, GetCommentListPresenter.CommentsCallback {

    private SharedPrefsHelper sharedPrefsHelper;
    private RecyclerView mCommentsRecyclerView;
    private ImageView closeBtn;
    private LinearLayoutManager mLayoutManager;
    private Intent intent;
    private String postId;
    private ArrayList<GetAllPostCommentOutput.Comments> getlist;
    private TextView noCommenttext;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }

    @Override
    protected int getLayoutId() {
        return R.layout.activity_comments;
    }

    @Override
    protected void initViews() {
        intent = getIntent();
        postId = intent.getStringExtra("postId");
        sharedPrefsHelper = new SharedPrefsHelper(this);
        closeBtn = (ImageView) findViewById(R.id.closeBtn);
        noCommenttext = (TextView) findViewById(R.id.text);
        closeBtn.setOnClickListener(this);
        mCommentsRecyclerView = (RecyclerView) findViewById(R.id.commentsRV);
        mLayoutManager = new LinearLayoutManager(this);
        mLayoutManager.setOrientation(LinearLayoutManager.VERTICAL);
        mCommentsRecyclerView.setLayoutManager(mLayoutManager);
        ImageView commentUserImage = (ImageView) findViewById(R.id.post_user_image);
        String localUser = sharedPrefsHelper.get(PreferenceKeys.PREF_USER_NAME, "");
        Glide.with(this)
                .load(HttpUtils.getProfileImageURL(localUser))
                .bitmapTransform(new RoundedCornersTransformation(this, 15, 15))
                .error(R.drawable.myprofilelarge)
                .diskCacheStrategy(DiskCacheStrategy.NONE)
                .skipMemoryCache(true)
                .into(commentUserImage);
        hitCommentApi();
    }

    private void hitCommentApi() {
        GetCommentListPresenter presenter = new GetCommentListPresenter(this);
        presenter.responseCheck(postId);
    }

    @Override
    public void dispose() {

    }

    @Override
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.closeBtn:
                finish();
                break;
        }
    }

    @Override
    public void getCommentListError(Call<GetAllPostCommentOutput> call, Throwable t) {
        showToast(t.getMessage());
    }

    @Override
    public void getCommentListSuccess(Response<GetAllPostCommentOutput> response) {
        if (response != null) {
            GetAllPostCommentOutput body = response.body();
            if (body != null) {
                getlist = body.getComments();
                if (getlist != null && getlist.size() > 0) {
                    mCommentsRecyclerView.setVisibility(View.VISIBLE);
                    //getcommentList = getlist;
                    setAdapter(mCommentsRecyclerView, getlist);
                    noCommenttext.setVisibility(View.GONE);
                } else {
                    noCommenttext.setVisibility(View.VISIBLE);
                    mCommentsRecyclerView.setVisibility(View.GONE);

                }
            } else {
                showToast(R.string.server_error_msg);
            }
        } else {
            showToast(R.string.server_error_msg);
        }
    }
}
