package com.nvcomputers.ten.views.profile;

import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.text.TextUtils;
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.widget.ImageView;
import android.widget.PopupMenu;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.engine.DiskCacheStrategy;
import com.bumptech.glide.signature.StringSignature;
import com.google.gson.Gson;
import com.nvcomputers.ten.R;
import com.nvcomputers.ten.adapter.UserProfileAdapter;
import com.nvcomputers.ten.api.GetRestAdapter;
import com.nvcomputers.ten.imagechooser.api.ChooserType;
import com.nvcomputers.ten.interfaces.AppCommonCallback;
import com.nvcomputers.ten.model.output.BlockUserOutput;
import com.nvcomputers.ten.model.output.EditProfileResponse;
import com.nvcomputers.ten.model.output.NewsFeedOutput;
import com.nvcomputers.ten.model.output.ProfileResponse;
import com.nvcomputers.ten.model.output.TopLikersResponse;
import com.nvcomputers.ten.presenter.GetUserProfilePresenter;
import com.nvcomputers.ten.presenter.ProfilePresenter;
import com.nvcomputers.ten.utils.DateTimeUtil;
import com.nvcomputers.ten.utils.FileUtils;
import com.nvcomputers.ten.utils.HttpUtils;
import com.nvcomputers.ten.utils.PreferenceKeys;
import com.nvcomputers.ten.utils.ProgressUtility;
import com.nvcomputers.ten.utils.SharedPrefsHelper;
import com.nvcomputers.ten.utils.Utilities;
import com.nvcomputers.ten.views.core.BaseFragment;
import com.nvcomputers.ten.views.home.LandingActivity;
import com.nvcomputers.ten.views.post.GpuImageFiltersActivity;
import com.theartofdev.edmodo.cropper.CropImage;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;

import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

import static android.app.Activity.RESULT_OK;

/**
 * Created by seasia on 7/5/2017.
 */

public class NewProfileFragment extends BaseFragment implements View.OnClickListener, ProfilePresenter.UsersProfileCallback,
        GetUserProfilePresenter.GetUserProfileCallback, AppCommonCallback, PopupMenu.OnMenuItemClickListener {
    private RecyclerView mPostsRecyclerView;
    private LinearLayoutManager mLayoutManager;
    private TextView mImageBackIcon;
    private TextView mUserNmTextView;
    private ImageView mSettingsImageView;
    private ImageView mReportImagView;
    private SharedPrefsHelper sharedPrefsHelper;
    private String mBlocked;
    public String mScreen;
    private ProgressBar mPostsProgressBar;
    private ProfilePresenter mProfilePresenter;
    private TextView mNoPostTextView;
    private ProfileResponse.Profile profileData;
    private UserProfileAdapter profileAdapter;
    int lastSavedPosition = 0;
    boolean noMoreData = false;
    private ArrayList<NewsFeedOutput.Posts> mPosts;

    private String mNotify;
    private SwipeRefreshLayout swipeRefreshLayout;
    private PopupMenu popup;
    public String mUserId, mUserName;
    private Timer timer;
    //private DrawerLayout drawer;
    private ArrayList<TopLikersResponse.Users> mTopTimer;
    private String filePath;
    private File imageFile;


    @Override
    public void dispose() {

    }


    @Override
    protected int getLayoutId() {
        return R.layout.fragment_profile;
    }

    @Override
    protected void initViews(View view) {
        //drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
//        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
//                mContext, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
//        drawer.setDrawerListener(toggle);
//        toggle.syncState();


        mPostsProgressBar = (ProgressBar) findViewById(R.id.pro_bar_profile_posts);
        mNoPostTextView = (TextView) findViewById(R.id.text_view_no_post);
        mImageBackIcon = (TextView) findViewById(R.id.image_back);
        mUserNmTextView = (TextView) findViewById(R.id.text_view_title);
        mSettingsImageView = (ImageView) findViewById(R.id.image_view_settings);
        mReportImagView = (ImageView) findViewById(R.id.image_view_report);
        mPostsRecyclerView = (RecyclerView) findViewById(R.id.recycler_view_posts);
        mLayoutManager = new LinearLayoutManager(getBaseActivity());
        mLayoutManager.setOrientation(LinearLayoutManager.VERTICAL);
        mPostsRecyclerView.setLayoutManager(mLayoutManager);
        mImageBackIcon.setOnClickListener(this);
        mSettingsImageView.setOnClickListener(this);
        mReportImagView.setOnClickListener(this);
        swipeRefreshLayout = (SwipeRefreshLayout) findViewById(R.id.swipeRefreshLayout);
        swipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
            @Override
            public void onRefresh() {
                if (mBlocked.contains("false")) {
                    getPostsApi(true);
                } else {
                    swipeRefreshLayout.setRefreshing(false);
                }

            }
        });
        sharedPrefsHelper = new SharedPrefsHelper(getBaseActivity());
        Bundle bundle = getArguments();
        if (bundle != null) {
            mUserName = bundle.getString("username");
            if (mUserName.contains("@")) {
                mUserName = mUserName.replace("@", "");
            }
            mScreen = null;
            mImageBackIcon.setVisibility(View.VISIBLE);
            mReportImagView.setVisibility(View.VISIBLE);
            mSettingsImageView.setVisibility(View.GONE);
        } else {
            mUserName = sharedPrefsHelper.get(PreferenceKeys.PREF_USER_NAME, "");
            mUserNmTextView.setText(mUserName);
            mBlocked = "false";
            mScreen = "1";
            mImageBackIcon.setVisibility(View.INVISIBLE);
            mSettingsImageView.setVisibility(View.VISIBLE);
            mReportImagView.setVisibility(View.GONE);
            profileAdapter = new UserProfileAdapter(this, this, profileData, R.id.profile_frame_layout, mScreen);
            mPostsRecyclerView.setAdapter(profileAdapter);
            getPostsApi(false);
        }
        mUserNmTextView.setText(mUserName);
        mPostsRecyclerView.setOnTouchListener(new View.OnTouchListener() {
            public boolean onTouch(View p_v, MotionEvent p_event) {
                // this will disallow the touch request for parent scroll on
                // touch of child view
                p_v.getParent().requestDisallowInterceptTouchEvent(true);
                return false;
            }
        });
        getProfileApi();

    }


    public void getProfileApi() {
        if (Utilities.checkInternet(mContext)) {
            GetUserProfilePresenter getUserProfilePresenter = new GetUserProfilePresenter(getBaseActivity(), this);
            getUserProfilePresenter.responseCheck(mUserName);
        } else {
            Utilities.showMessage(mContext, getString(R.string.no_internet_msg));
        }
    }

    @Override
    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        inflater.inflate(R.menu.menu_main2, menu);
        super.onCreateOptionsMenu(menu, inflater);
    }

    public void createPopup(View v) {
        popup = new PopupMenu(getBaseActivity(), v);
        popup.setOnMenuItemClickListener(this);
        MenuInflater inflater = popup.getMenuInflater();
        inflater.inflate(R.menu.menu_main2, popup.getMenu());
    }

    public void showPopUp() {
        if (popup != null)
            popup.show();
    }

    @Override
    public void reLoadList() {
        super.reLoadList();
        if (!Utilities.checkInternet(mContext)) {
            showToast(R.string.no_internet_msg);
        } else {
            getPostsApi(true);
        }
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        cancelTimer();
    }


    private void cancelTimer() {
        if (timer != null) {
            try {
                timer.cancel();
                timer = null;
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    @Override
    public boolean onMenuItemClick(MenuItem menuItem) {
        int id = menuItem.getItemId();
        if (Utilities.checkInternet(mContext)) {
            switch (id) {
                case R.id.report_user:
                    popup.dismiss();
                    showToast("coming soon");
                    break;

                case R.id.block:
                    popup.dismiss();
                    if (mBlocked.equals("true")) {
                        unblockUser(mUserId);
                    } else {
                        blockUser(mUserId);
                        mBlocked = String.valueOf(true);
                    }
                    break;
                case R.id.cancel:
                    popup.dismiss();
                    break;
            }
        } else {
            Utilities.showMessage(mContext, mContext.getString(R.string.no_internet_msg));
        }

        popup.show();//showing popup menu
        return false;
        //216 test user
    }

    @Override
    public void onClick(View view) {

        LandingActivity landingActivity = (LandingActivity) getBaseActivity();
        switch (view.getId()) {

            case R.id.image_view_settings:
                landingActivity.drawer.openDrawer(GravityCompat.START);
//                Bundle bundle = new Bundle();
//                bundle.putString("username", mUserName);
//                bundle.putString("nick_name", mNickName);
//                bundle.putString("description", mDescription);
//                bundle.putString("isnotify", mNotify);
//                bundle.putString("isPrivate", mIsPrivate);
//                replaceChildFragment(R.id.profile_frame_layout, new SettingsFragment(), bundle);
                break;
            case R.id.image_back:
                //landingActivity.drawer.closeDrawer(R.id.drawer_layout);
                manualBackPressed();
                break;

        }
    }


    private void getPostsApi(boolean reload) {
        if (mUserName.equals(sharedPrefsHelper.get(PreferenceKeys.PREF_USER_NAME, ""))) {
            String profileDataStr = sharedPrefsHelper.get(PreferenceKeys.PREF_PROFILE_PAGE_DATA, "");
            if (reload) {
                loadPaginationData(0);
            } else if (profileDataStr != null && profileDataStr.length() > 0) {
                Gson gson = new Gson();
                NewsFeedOutput data = gson.fromJson(profileDataStr, NewsFeedOutput.class);
                if (data != null && data.getPosts() != null && data.getPosts().size() > 0) {
                    ArrayList<NewsFeedOutput.Posts> offlinePostList = data.getPosts();
                    mPosts = new ArrayList<>();
                    mPosts.clear();
                    for (int i = 0; i < offlinePostList.size(); i++) {
                        boolean isReposted = offlinePostList.get(i).getIsReposted();
                        if (isReposted) {
                            String expireTime = offlinePostList.get(i).getExpiration();
                            if (!DateTimeUtil.checkExpiration(expireTime)) {
                                mPosts.add(offlinePostList.get(i));
                            }
                        } else {
                            mPosts.add(offlinePostList.get(i));
                        }
                    }
                    data.setPosts(mPosts);
                    String jsonBody = gson.toJson(data, NewsFeedOutput.class);
                    sharedPrefsHelper.save(PreferenceKeys.PREF_PROFILE_PAGE_DATA, jsonBody);
                    if (mPosts.size() == 0) {
                        loadPaginationData(0);
                    } else {
                        handleBody(data, false);
                    }
                } else {
                    loadPaginationData(0);
                }
            } else {
                loadPaginationData(0);
            }
        } else {
            if (mProfilePresenter == null) {
                mProfilePresenter = new ProfilePresenter(getBaseActivity(), this);
            }
            mProfilePresenter.getActivePost(mUserName);
        }
    }

    @Override
    public void setProgressBar() {

    }

    @Override
    public void dismiss() {

    }

    public void scrollUp() {
        if (profileAdapter != null && profileAdapter.getItemCount() > 0) {
            mPostsRecyclerView.smoothScrollToPosition(0);
        }
    }

    boolean loading = false;

    public void loadPaginationData(int listCount) {
        String localUsername = sharedPrefsHelper.get(PreferenceKeys.PREF_USER_NAME, "");
        if (!mUserName.equals(localUsername)) {
            return;
        }
        if (mProfilePresenter == null) {
            mProfilePresenter = new ProfilePresenter(getBaseActivity(), this);
        }
        if (listCount == 0) {
            lastSavedPosition = 0;
            noMoreData = false;
            mPosts = new ArrayList<>();
            mPosts.clear();
            mProfilePresenter.getPosts(mUserName, listCount + "");
        } else {
            lastSavedPosition = listCount - 1;
            if (!noMoreData && !loading) {
                loading = true;
                mProfilePresenter.getPosts(mUserName, listCount + "");
            } else {
                ProgressUtility.dismissProgress();
            }
        }
    }

    @Override
    public void userProfileError(Call<ProfileResponse> call, Throwable t) {
        showToast(t.getMessage());
        mPostsProgressBar.setVisibility(View.GONE);
    }


    @Override
    public void onUserProfileSuccess(Response<ProfileResponse> response) {
        ProfileResponse body = response.body();
        mPostsProgressBar.setVisibility(View.GONE);
        LandingActivity landingActivity = (LandingActivity) getBaseActivity();
        if (body != null) {
            createPopup(mReportImagView);
            profileData = body.getProfile();
            if (profileData != null) {
                mUserId = profileData.getUser().getIdUser();
                landingActivity.mIsPrivate = profileData.getUser().getIsPrivate();
                mNotify = profileData.getUser().getIsNotify();
                mBlocked = profileData.getUser().getBlocked();
                mBlocked = profileData.getUser().getBlocked();
                if (mBlocked.contains("false")) {
                    if (profileAdapter == null) {
                        profileAdapter = new UserProfileAdapter(this, this, profileData, R.id.profile_frame_layout, mScreen);
                        mPostsRecyclerView.setAdapter(profileAdapter);
                    } else {
                        profileAdapter.updateProfile(profileData);
                    }
                    if (mScreen == null) {
                        getPostsApi(false);
                    }
                } else {
                    profileAdapter = new UserProfileAdapter(this, this, null, R.id.profile_frame_layout, mScreen);
                    mPostsRecyclerView.setAdapter(profileAdapter);
                    popup.getMenu().getItem(1).setTitle("Unblock");
                }
            } else {
                Utilities.showMessage(mContext, "User Not Found");
            }

        } else {
            Utilities.showMessage(mContext, getString(R.string.user_not_found));
        }

        if (TextUtils.isEmpty(mNotify) || mNotify.contains("false")) {
            landingActivity.privateOption.setChecked(false);
        } else {
            landingActivity.privateOption.setChecked(true);
        }
    }


    @Override
    public void setPostsAdapter(Response<NewsFeedOutput> response) {
        swipeRefreshLayout.setRefreshing(false);
        if (response != null) {
            NewsFeedOutput body = response.body();
            if (body != null) {
                handleBody(body, true);
            } else {
                mNoPostTextView.setVisibility(View.VISIBLE);
                mPostsProgressBar.setVisibility(View.INVISIBLE);
            }
            loading = false;
        } else {
            mNoPostTextView.setVisibility(View.VISIBLE);
            mPostsProgressBar.setVisibility(View.INVISIBLE);
        }
    }

    private void handleBody(NewsFeedOutput body, boolean isOnline) {
        String localUsername = sharedPrefsHelper.get(PreferenceKeys.PREF_USER_NAME, "");
        if (!mUserName.equals(localUsername)) {
            return;
        }
        if (mPosts == null) {
            mPosts = new ArrayList<>();
        }
        ArrayList<NewsFeedOutput.Posts> posts = body.getPosts();
        ArrayList<NewsFeedOutput.Posts> ownPosts = new ArrayList<>();
        if (posts != null && posts.size() > 0) {
            for (int i = 0; i < posts.size(); i++) {
                boolean isReposted = posts.get(i).getIsReposted();
                if (isReposted) {
                    String expireTime = posts.get(i).getExpiration();
                    if (!DateTimeUtil.checkExpiration(expireTime)) {
                        ownPosts.add(posts.get(i));
                    }
                } else {
                    ownPosts.add(posts.get(i));
                }
            }
            mPosts.addAll(ownPosts);
            if (profileAdapter == null) {
                profileAdapter = new UserProfileAdapter(this, this, profileData, R.id.profile_frame_layout, mScreen);
                mPostsRecyclerView.setAdapter(profileAdapter);
            }
            profileAdapter.updatePostList(mPosts);
            //cancelTimer();
            if (timer == null) {
                timer = new Timer();
                timer.schedule(new TimerTask() {
                    @Override
                    public void run() {
                        checkPostExpiration();
                    }
                }, 500, 10000);
            }
            if (isOnline) {
                body.setPosts(mPosts);
                Gson gson = new Gson();
                String jsonBody = gson.toJson(body, NewsFeedOutput.class);
                sharedPrefsHelper.save(PreferenceKeys.PREF_PROFILE_PAGE_DATA, jsonBody);
            }
        } else {
            noMoreData = true;
            if (mPosts == null || mPosts.size() == 0) {
                mNoPostTextView.setVisibility(View.VISIBLE);
                //mNoPostTextView.setText("No Post Found");
            }
        }
        mPostsProgressBar.setVisibility(View.INVISIBLE);
    }

    private void checkPostExpiration() {
        getBaseActivity().runOnUiThread(new Runnable() {
            @Override
            public void run() {
                if (mPosts != null && mPosts.size() > 0) {
                    profileAdapter.updateList(mLayoutManager);
                }
            }
        });
    }

    @Override
    public void setPostsError(String error) {
        swipeRefreshLayout.setRefreshing(false);
    }

    @Override
    public void onActivePostError(Call<NewsFeedOutput> call, Throwable t) {
        hideDialog();
        swipeRefreshLayout.setRefreshing(false);
    }

    @Override
    public void onActivePostSuccess(Response<NewsFeedOutput> response) {
        swipeRefreshLayout.setRefreshing(false);
        hideDialog();
        if (response != null) {
            NewsFeedOutput body = response.body();
            if (body != null) {
                ArrayList<NewsFeedOutput.Posts> posts = body.getPosts();
                if (posts == null || posts.size() == 0) {
                    mNoPostTextView.setVisibility(View.VISIBLE);
                    mNoPostTextView.setText("No Active Posts");
                    mPostsProgressBar.setVisibility(View.INVISIBLE);
                    profileAdapter = new UserProfileAdapter(this, this, profileData, R.id.profile_frame_layout, mScreen);
                    mPostsRecyclerView.setAdapter(profileAdapter);
                } else {
                    mNoPostTextView.setVisibility(View.GONE);
                    mPostsProgressBar.setVisibility(View.VISIBLE);
                    //if (profileAdapter == null) {
                    profileAdapter = new UserProfileAdapter(this, this, profileData, R.id.profile_frame_layout, mScreen);
                    mPostsRecyclerView.setAdapter(profileAdapter);
                    //}
                    profileAdapter.updatePostList(posts);
                }
            } else {
                mNoPostTextView.setVisibility(View.VISIBLE);
                mNoPostTextView.setText("No Active Posts");
                mPostsProgressBar.setVisibility(View.INVISIBLE);
                Toast.makeText(getBaseActivity(), "No Active post.", Toast.LENGTH_LONG).show();
            }
        } else {
            mPostsProgressBar.setVisibility(View.INVISIBLE);
            showToast(R.string.no_data_found_msg);
        }
    }


    private void unblockUser(String idUser) {
        Call<BlockUserOutput> response = GetRestAdapter.getRestAdapter(true).unblockUser(idUser);
        response.enqueue(new Callback<BlockUserOutput>() {
            @Override
            public void onResponse(Call<BlockUserOutput> call,
                                   Response<BlockUserOutput> response) {
                if (response != null && response.body() != null) {
                    if (response.body().getSuccess().contains("true")) {
                        mBlocked = String.valueOf(false);
                        popup.getMenu().getItem(1).setTitle("Block");
                        getProfileApi();
                    }
                } else {
                    showToast(R.string.server_error_msg);
                }
            }

            @Override
            public void onFailure(Call<BlockUserOutput> call, Throwable t) {
                showToast(t.getMessage());
            }
        });
    }

    public void blockUser(final String idUser) {
        Call<BlockUserOutput> response = GetRestAdapter.getRestAdapter(true).blockUser(idUser);
        response.enqueue(new Callback<BlockUserOutput>() {
            @Override
            public void onResponse(Call<BlockUserOutput> call,
                                   Response<BlockUserOutput> response) {
                if (response != null && response.body() != null) {

                    if (response.body().getSuccess().contains("true")) {

                        popup.getMenu().getItem(1).setTitle("Unblock");
                        mBlocked = String.valueOf(true);
                        profileAdapter = new UserProfileAdapter(NewProfileFragment.this, NewProfileFragment.this, null, R.id.profile_frame_layout, mScreen);
                        mPostsRecyclerView.setAdapter(profileAdapter);
                    } else {
                        mBlocked = String.valueOf(false);
                    }
                } else {
                    showToast(R.string.server_error_msg);
                }
            }

            @Override
            public void onFailure(Call<BlockUserOutput> call, Throwable t) {
                showToast(t.getMessage());
            }
        });
    }


    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == RESULT_OK) {

            Log.i(TAG, "File Path : " + filePath);
            //Log.i(TAG, "Chooser Type: " + chooserType);

            if (requestCode == ChooserType.REQUEST_CAPTURE_PICTURE ||
                    requestCode == ChooserType.REQUEST_PICK_PICTURE) {

                if (data != null && data.getData() != null) {
                    Uri uri = data.getData();
                    handleUri(uri);
                } else {
                    Uri uri = Uri.fromFile(new File(filePath));
                    if (uri != null) {
                        handleUri(uri);
                    } else {
                        Log.d("", "-PICK-ERROR-");
                    }
                }
            } else if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {
                CropImage.ActivityResult result = CropImage.getActivityResult(data);
                if (resultCode == RESULT_OK) {
                    Uri resultUri = result.getUri();
                    handleCroppedURI(resultUri);
                } else if (resultCode == CropImage.CROP_IMAGE_ACTIVITY_RESULT_ERROR_CODE) {
                    Exception error = result.getError();
                    Toast.makeText(getBaseActivity(), "" + error, Toast.LENGTH_LONG).show();
                }
            }
        }
    }

    private void handleUri(Uri mSelectedImageUri) {
        if (mSelectedImageUri == null) {
            Log.i("Profile", "imageUri is null");
        }
        CropImage.activity(mSelectedImageUri).start(getContext(), this);
    }

    private void handleCroppedURI(Uri resultUri) {
        Intent intent1 = new Intent(getBaseActivity(), GpuImageFiltersActivity.class);
        String realPath = FileUtils.getPath(getBaseActivity(), resultUri);
        intent1.putExtra("SelectedImagePath", realPath);
        intent1.putExtra("selphie", "");
        intent1.putExtra("mode", "gallery");
        startActivity(intent1);
    }

    @Override
    public void onResume() {
        super.onResume();
        if (GpuImageFiltersActivity.savedfilePath != null) {
            final String picturePath = GpuImageFiltersActivity.savedfilePath;
            GpuImageFiltersActivity.savedfilePath = null;
            imageFile = new File(picturePath);
            //image_loader.setVisibility(View.VISIBLE);
            Thread thread = new Thread(new Runnable() {
                @Override
                public void run() {
                    final Bitmap mBitmap = BitmapFactory.decodeFile(picturePath);
                    getBaseActivity().runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            profileAdapter.updateProfileImage(mBitmap);
                            //mUserImageView.setImageBitmap(mBitmap);
                            //image_loader.setVisibility(View.GONE);
                            uploadBitmap(mBitmap);
                        }
                    });
                }
            });
            thread.start();

        }
    }

    private void uploadBitmap(Bitmap bitmap) {
        final Bitmap scaledBitmap = FileUtils.getCropedBitmap(bitmap);
        //mUserImageView.setImageBitmap(scaledBitmap);
        profileAdapter.updateProfileImage(scaledBitmap);
        if (imageFile != null && imageFile.exists() && imageFile.length() > 0) {
            callApi(imageFile, scaledBitmap);
        } else {
            Thread thread = new Thread(new Runnable() {
                @Override
                public void run() {
                    FileOutputStream out = null;
                    try {
                        String path = Environment.getExternalStorageDirectory().toString();
                        imageFile = new File(path, "TenUser_" + mUserName + ".jpeg");
                        out = new FileOutputStream(imageFile);
                        scaledBitmap.compress(Bitmap.CompressFormat.JPEG, 60, out); // bmp is your Bitmap instance
                        // PNG is a lossless format, the compression factor (100) is ignored
                    } catch (Exception e) {
                        e.printStackTrace();
                    } finally {
                        try {
                            if (out != null) {
                                out.close();
                            }
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                        activity.runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                callApi(imageFile, scaledBitmap);
                            }
                        });
                    }
                }
            });
            thread.start();
        }
    }

    public void callApi(File imageFile, Bitmap bitmap) {

        String uriType = "image/png";
        Bitmap.CompressFormat formatType = Bitmap.CompressFormat.PNG;
        if (imageFile.getPath().contains("jpeg")) {
            uriType = "image/jpeg";
            formatType = Bitmap.CompressFormat.JPEG;
        } else if (imageFile.getPath().contains("jpg")) {
            uriType = "image/jpg";
            formatType = Bitmap.CompressFormat.JPEG;
        }
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        bitmap.compress(formatType, 50, stream);
        byte[] byteArray = stream.toByteArray();

        showDialog();

        RequestBody requestBody = RequestBody.create(MediaType.parse(uriType), byteArray);
        MultipartBody.Part filePart = MultipartBody.Part.createFormData("imageFile", imageFile.getName(), requestBody);
        // RequestBody.create(MediaType.parse("image/*"), imageFile)
        Call<EditProfileResponse> response = GetRestAdapter.getRestAdapter(true).uploadProfileImage(filePart);
        response.enqueue(new Callback<EditProfileResponse>() {
            @Override
            public void onResponse(Call<EditProfileResponse> call, retrofit2.Response<EditProfileResponse> response) {
                hideDialog();
                if (response != null && response.body() != null) {
                    if (response.body().getSuccess().equals("true")) {
                        showToast("Profile Updated Successfully");
                        String imageTag = String.valueOf(System.currentTimeMillis());
                        sharedPrefsHelper.save(PreferenceKeys.PREF_IMAGE_TAG, imageTag);
                        Glide.with(mContext)
                                .load(HttpUtils.getProfileImageURL(mUserName))
                                .error(getBaseActivity().getResources().getDrawable(R.drawable.myprofilelarge))
                                .placeholder(R.drawable.myprofilelarge)
                                .diskCacheStrategy(DiskCacheStrategy.RESULT)
                                .signature(new StringSignature(imageTag))
                                .into(profileAdapter.getImageView());
                    } else {
                        showToast(getActivity().getString(R.string.server_error_msg));
                    }
                } else {
                    showToast(getActivity().getString(R.string.server_error_msg));
                }
            }

            @Override
            public void onFailure(Call<EditProfileResponse> call, Throwable t) {
                hideDialog();
                showToast(t.getMessage());
            }
        });

    }
}
