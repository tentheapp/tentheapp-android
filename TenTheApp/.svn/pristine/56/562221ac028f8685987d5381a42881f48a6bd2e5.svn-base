package com.nvcomputers.ten.views.home;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.content.ContextCompat;
import android.support.v7.widget.RecyclerView;
import android.text.TextUtils;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.PopupMenu;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.bumptech.glide.Glide;
import com.nvcomputers.ten.R;
import com.nvcomputers.ten.adapter.SelectedPostCommentAdapter;
import com.nvcomputers.ten.api.GetRestAdapter;
import com.nvcomputers.ten.interfaces.AppCommonCallback;
import com.nvcomputers.ten.interfaces.DoubleClickListener;
import com.nvcomputers.ten.model.output.DeletePostResponse;
import com.nvcomputers.ten.model.output.GetAllPostCommentOutput;
import com.nvcomputers.ten.model.output.NewsFeedOutput;
import com.nvcomputers.ten.model.output.PostCommentOutput;
import com.nvcomputers.ten.model.output.PostCountResponse;
import com.nvcomputers.ten.model.output.RepostPostResponse;
import com.nvcomputers.ten.model.output.UnFollowResponse;
import com.nvcomputers.ten.presenter.DeletePostPresenter;
import com.nvcomputers.ten.presenter.GetCommentListPresenter;
import com.nvcomputers.ten.presenter.LikeCommentsCountsPresenter;
import com.nvcomputers.ten.presenter.PostCommentPresenter;
import com.nvcomputers.ten.presenter.RepostPostPresenter;
import com.nvcomputers.ten.utils.DateTimeUtil;
import com.nvcomputers.ten.utils.HttpUtils;
import com.nvcomputers.ten.utils.PreferenceKeys;
import com.nvcomputers.ten.utils.ProgressUtility;
import com.nvcomputers.ten.utils.SharedPrefsHelper;
import com.nvcomputers.ten.utils.Utilities;
import com.nvcomputers.ten.views.core.BaseActivity;
import com.nvcomputers.ten.views.profile.ProfileActivity;
import com.nvcomputers.ten.views.profile.ZoomImageActivity;

import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;

import jp.wasabeef.glide.transformations.RoundedCornersTransformation;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class SelectedPostViewActivity extends BaseActivity implements AppCommonCallback, RepostPostPresenter.RepostCallback, DeletePostPresenter.DeletePostCallback,
        GetCommentListPresenter.CommentsCallback, PostCommentPresenter.CommentCallback, View.OnClickListener,
        PopupMenu.OnMenuItemClickListener, LikeCommentsCountsPresenter.LikeCommentsCallback {


    private android.widget.ProgressBar ProgressBar;

    private ImageView PostImage, UserImage, ClockImageView, LikeImage, RepostImage, CommentImage;
    private TextView UsernameTextView, CaptionTextView, TimeRemainingTextView, TimeElapasedTextView, RepostedTextView;
    private RelativeLayout videoRelative, pofileRelativeLayout;
    public String userId, postId, likedPostStatus, remainingTime, expirationTime, mUserId;//userImage, postImage,
    private boolean isClicked = false;
    private ImageView commentImage;
    private EditText edit_text_comment;
    private String username;
    private RecyclerView mCommentsRecyclerView;
    private ArrayList<GetAllPostCommentOutput.Comments> getlist;
    private ArrayList<GetAllPostCommentOutput.Comments> getcommentList;
    private TextView text;
    private SharedPrefsHelper sharedPrefsHelper;
    private android.widget.ProgressBar progressBar;
    private Timer timer;
    NewsFeedOutput.Posts singlePost;
    private ImageView playBtn;
    private TextView likeCount, repostCount, commentCount;
    private SelectedPostCommentAdapter adapter;
    private ImageView imageBack;
    private ImageView action;
    private Context mContext;
    private PopupMenu popup;
    private LikeCommentsCountsPresenter likeCommentsCountsPresenter;
    private String backText;
    private TextView back_text;


    @Override
    protected int getLayoutId() {
        return R.layout.fragment_selected_post_view;
    }

    protected void getDataFromBundle() {
        sharedPrefsHelper = new SharedPrefsHelper(this);
        Bundle bundle = getIntent().getExtras();
        singlePost = bundle.getParcelable("post_data");
        userId = bundle.getString("userId");
        postId = bundle.getString("postId");
        likedPostStatus = bundle.getString("likedValue");
        remainingTime = bundle.getString("remainingTime");
        expirationTime = bundle.getString("expirationTime");
        username = bundle.getString("userName");
        backText = bundle.getString("Back", "");
    }

    @Override
    protected void initViews() {

        getDataFromBundle();
        mContext = this;
        SharedPrefsHelper sharedPrefsHelper = new SharedPrefsHelper(this);
        mUserId = sharedPrefsHelper.get(PreferenceKeys.PREF_USER_ID);
        mCommentsRecyclerView = (RecyclerView) findViewById(R.id.comment_list);
        pofileRelativeLayout = (RelativeLayout) findViewById(R.id.pofileRelativeLayout);
        progressBar = (ProgressBar) findViewById(R.id.progressBar);
        PostImage = (ImageView) findViewById(R.id.postimage);
        playBtn = (ImageView) findViewById(R.id.playBtn1);
        text = (TextView) findViewById(R.id.text);
        UserImage = (ImageView) findViewById(R.id.userimage);
        commentImage = (ImageView) findViewById(R.id.comment_image);
        imageBack = (ImageView) findViewById(R.id.image_back);
        back_text = (TextView) findViewById(R.id.back_text);
        if (backText != null && backText.length() > 0) {
            back_text.setText(backText);
        }
        action = (ImageView) findViewById(R.id.action);
        edit_text_comment = (EditText) findViewById(R.id.edit_text_comment);
        UsernameTextView = (TextView) findViewById(R.id.username);
        TimeRemainingTextView = (TextView) findViewById(R.id.timeremaining);
        TimeElapasedTextView = (TextView) findViewById(R.id.timeelapsed);
        RepostedTextView = (TextView) findViewById(R.id.repostlabel);
        ClockImageView = (ImageView) findViewById(R.id.clock);
        LikeImage = (ImageView) findViewById(R.id.like);
        RepostImage = (ImageView) findViewById(R.id.repost);
        likeCount = (TextView) findViewById(R.id.like_count);
        repostCount = (TextView) findViewById(R.id.repost_count);
        commentCount = (TextView) findViewById(R.id.comment_count);
        RepostImage.setOnClickListener(this);
        CommentImage = (ImageView) findViewById(R.id.comment);
        videoRelative = (RelativeLayout) findViewById(R.id.videorelative);
        commentImage.setOnClickListener(this);
        imageBack.setOnClickListener(this);
        action.setOnClickListener(this);
        UsernameTextView.setOnClickListener(this);

        TimeRemainingTextView.setOnClickListener(this);
        findViewById(R.id.clock).setOnClickListener(this);

        LikeImage.setOnClickListener(this);
        likeCommentsCountsPresenter = new LikeCommentsCountsPresenter(this, this);


        PostImage.setOnLongClickListener(new View.OnLongClickListener() {
            @Override
            public boolean onLongClick(View view) {
                Intent intent = new Intent(SelectedPostViewActivity.this, ZoomImageActivity.class);
                intent.putExtra("image", HttpUtils.getPostImageURL(postId));
                startActivity(intent);
                return false;
            }
        });

        PostImage.setOnClickListener(new DoubleClickListener() {
            @Override
            public void onSingleClick(View v) {

            }

            @Override
            public void onDoubleClick(View v) {
                if (!mUserId.equals(userId)) {
                    if (!Utilities.checkInternet(SelectedPostViewActivity.this)) {
                        showToast(R.string.no_internet_msg);
                    } else {
                        likePost(postId);
                    }
                }
            }
        });

        UsernameTextView.setText(username);
        Glide.with(SelectedPostViewActivity.this)
                .load(HttpUtils.getPostImageURL(postId))
                .into(PostImage);
        Glide.with(SelectedPostViewActivity.this)
                .load(HttpUtils.getPostImageURL(username))
                .into(UserImage);

        GetCommentListPresenter presenter = new GetCommentListPresenter(this);
        presenter.responseCheck(postId);

        checkPostExpiration();
        timer = new Timer();
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                SelectedPostViewActivity.this.runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        checkPostExpiration();
                    }
                });
            }
        }, 0, 5000);

        if (singlePost != null) {
            updatePostData();
        }
    }

    private void updatePostData() {
        if (singlePost.getHasImage()) {
            playBtn.setVisibility(View.INVISIBLE);//Visibility = ViewStates.Invisible;
            progressBar.setVisibility(View.VISIBLE);//Visibility = ViewStates.Visible;
            PostImage.setVisibility(View.VISIBLE);//Visibility = ViewStates.Visible;
            pofileRelativeLayout.setVisibility(View.VISIBLE);
            Glide.with(mContext)
                    .load(HttpUtils.getPostImageURL(singlePost.getIdPost()))
                    .bitmapTransform(new RoundedCornersTransformation(mContext, 20, 15))
                    .into(PostImage);
            if (singlePost.getVideoUrl() != null && !singlePost.getVideoUrl().equals("") && !singlePost.equals("null")) {
                playBtn.setVisibility(View.VISIBLE);
                videoRelative.setVisibility(View.GONE);
            }
        } else {
            playBtn.setVisibility(View.GONE);//Visibility = ViewStates.Invisible;
            progressBar.setVisibility(View.GONE);//Visibility = ViewStates.Gone;
            PostImage.setVisibility(View.GONE);//Visibility = ViewStates.Gone;
            pofileRelativeLayout.setVisibility(View.GONE);
        }
        String commentCounts = String.valueOf(singlePost.getCommentCount());
        String repostCounts = String.valueOf(singlePost.getRepostCount());
        String likeCounts = String.valueOf(singlePost.getLikeCount());
        if (likeCounts.equals("0"))
            likeCounts = "";
        if (repostCounts.equals("0"))
            repostCounts = "";
        if (commentCounts.equals("0"))
            commentCounts = "";

        commentCount.setText(commentCounts);
        repostCount.setText(repostCounts);
        likeCount.setText(likeCounts);
        if (singlePost.getUserReposter() != null) {
            RepostedTextView.setVisibility(View.VISIBLE);
            if (singlePost.getUserReposter().getIdUser().equals(userId)) {
                RepostedTextView.setText("by you");// = "by you";
            } else {
                RepostedTextView.setText("by " + singlePost.getUserReposter().getUsername());//Text = "by " + post.userReposter.username;
            }
        } else {
            RepostedTextView.setVisibility(View.INVISIBLE);
            RepostedTextView.setText("");
        }

        if (singlePost.getIsReposted()) {
            RepostImage.setImageResource(R.drawable.repost_selected);
        } else {
            RepostImage.setImageResource(R.drawable.repost);
        }
        if (singlePost.getLiked() == true) {
            LikeImage.setImageDrawable(ContextCompat.getDrawable(mContext, R.drawable.likeselected));
        } else {
            LikeImage.setImageDrawable(ContextCompat.getDrawable(mContext, R.drawable.like));
        }
        if (singlePost.getCommented()) {
            commentImage.setImageResource(R.drawable.commentselected);

        } else {
            commentImage.setImageResource(R.drawable.comment);
        }
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        cancelTimer();
    }

    private void cancelTimer() {
        if (timer != null) {
            try {
                timer.cancel();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void checkPostExpiration() {
        if (adapter != null) {
            adapter.notifyDataSetChanged();
        }
        if (DateTimeUtil.checkExpiration(expirationTime)) {
            TimeRemainingTextView.setText("11m");
            ClockImageView.setVisibility(View.GONE);
            TimeRemainingTextView.setBackground(ContextCompat.getDrawable(mContext, R.drawable.rounded_btn_black_filled));
            TimeRemainingTextView.setTextColor(ContextCompat.getColor(mContext, R.color.white));
        } else {
            //update time
            String expTime = DateTimeUtil.getRemainingTimeInMinutes(expirationTime);
            if (expTime.equals("Exp")) {
                TimeRemainingTextView.setText("11m");
                ClockImageView.setVisibility(View.GONE);
                TimeRemainingTextView.setBackground(ContextCompat.getDrawable(mContext, R.drawable.rounded_btn_black_filled));
                TimeRemainingTextView.setTextColor(ContextCompat.getColor(mContext, R.color.white));
            } else {
                TimeRemainingTextView.setText(expTime);
                String xTime = expTime.substring(0, expTime.length() - 1);
                int intTime = Integer.parseInt(xTime);
                if (expTime.contains("s") || intTime < 5) {
                    TimeRemainingTextView.setTextColor(ContextCompat.getColor(mContext, R.color.red_color));
                } else if (intTime < 7) {
                    TimeRemainingTextView.setTextColor(ContextCompat.getColor(mContext, R.color.yellow_color));
                } else {
                    TimeRemainingTextView.setTextColor(ContextCompat.getColor(mContext, R.color.green_color));
                }
            }
        }
        TimeElapasedTextView.setText(DateTimeUtil.getElapseTimeInMinutes(remainingTime));
    }

    private void likePost(String idPost) {
        Call<UnFollowResponse> response = GetRestAdapter.getRestAdapter(true).likePost(idPost);
        response.enqueue(new Callback<UnFollowResponse>() {
            @Override
            public void onResponse(Call<UnFollowResponse> call,
                                   retrofit2.Response<UnFollowResponse> response) {
                if (response != null && response.body() != null) {
                    if (response.body().getSuccess().contains("true")) {
                        likeCommentsCountsPresenter.countsApi(0, postId);
                    } else {
                        showToast(response.message());
                    }
                }
            }

            @Override
            public void onFailure(Call<UnFollowResponse> call, Throwable t) {
                showToast(t.getMessage());
            }
        });
    }


    @Override
    public void onClick(View v) {
        String commentText = edit_text_comment.getText().toString();
        Intent intents=null;
        switch (v.getId()) {
            case R.id.clock:
                intents = new Intent(SelectedPostViewActivity.this, TimersActivity.class);
                intents.putExtra("postId", postId);
                startActivity(intents);
                break;
            case R.id.timeremaining:
                intents = new Intent(SelectedPostViewActivity.this, TimersActivity.class);
                intents.putExtra("postId", postId);
                startActivity(intents);
                break;


            case R.id.username:
                if (!mUserId.equals(userId)) {
                    Intent intent = new Intent(SelectedPostViewActivity.this, ProfileActivity.class);
                    intent.putExtra("username", username);
                    startActivity(intent);
                }
                break;
            case R.id.comment_image:
                Utilities.hideKeypad(v);
                if (!Utilities.checkInternet(this)) {
                    showToast(R.string.no_internet_msg);
                } else if (DateTimeUtil.checkExpiration(expirationTime)) {
                    showToast("You can't add comment on expired post.");
                } else {
                    if (!TextUtils.isEmpty(commentText)) {
                        PostCommentPresenter presenter = new PostCommentPresenter(this);
                        presenter.responseCheck(postId, commentText);
                    }
                }
                break;
            case R.id.like:
                if (!userId.equals(mUserId)) {
                    if (!Utilities.checkInternet(this)) {
                        showToast(R.string.no_internet_msg);
                    } else {
                        likePost(postId);
                    }
                }
                break;

            case R.id.postimage:
                Intent i = new Intent(SelectedPostViewActivity.this, ZoomImageActivity.class);
                i.putExtra("image", HttpUtils.getPostImageURL(postId));
                startActivity(i);
                break;
            case R.id.image_back:
                finish();
                break;
            case R.id.back_text:
                finish();
                break;
            case R.id.action:
                showPopup(v);
                break;
            case R.id.repost:
                if (singlePost.getUserPoster().getIdUser().equals(userId)) {
                    return;
                }
                if (singlePost.getIsReposted()) {
                    return;
                }

                String expTime = DateTimeUtil.getRemainingTimeInMinutes(expirationTime);
                if (expTime.equals("Exp")) {
                    return;
                }
                repostPost(postId);
                break;
        }
    }

    private void repostPost(String postId) {
        RepostPostPresenter repostPostPresenter = new RepostPostPresenter(this, this);
        repostPostPresenter.responseCheck(postId);
    }

    public void showPopup(View v) {
        String currentUserId = sharedPrefsHelper.get(PreferenceKeys.PREF_USER_ID);
        popup = new PopupMenu(SelectedPostViewActivity.this, v);
        popup.setOnMenuItemClickListener(this);
        MenuInflater inflater = popup.getMenuInflater();
        if (userId.equals(currentUserId)) {
            inflater.inflate(R.menu.sameuser_menu, popup.getMenu());
        } else {
            inflater.inflate(R.menu.other_user_post_menu, popup.getMenu());
        }
        popup.show();

    }

    @Override
    public void setProgressBar() {

    }

    @Override
    public void dismiss() {
    }

    @Override
    public void dispose() {

    }

    @Override
    public void postCommmentError(Call<PostCommentOutput> call, Throwable t) {
        showToast(t.getMessage());
    }

    @Override
    public void postCommmentSuccess(Response<PostCommentOutput> response) {
        ProgressUtility.dismissProgress();
        if (response != null && response.body() != null) {
            if (response.code() == 200) {
                edit_text_comment.setText("");
                GetCommentListPresenter presenter = new GetCommentListPresenter(this);
                presenter.responseCheck(postId);
                likeCommentsCountsPresenter.countsApi(0, postId);
            } else {
                showToast(R.string.no_data_found_msg);
            }

        } else {
            showToast(R.string.server_error_msg);
        }
    }


    @Override
    public void setAdapter(RecyclerView recyclerView, ArrayList<?> mList) {
        super.setAdapter(recyclerView, mList);
        adapter = new SelectedPostCommentAdapter(this, mList);
        mCommentsRecyclerView.setAdapter(adapter);
    }

    @Override
    public void getCommentListError(Call<GetAllPostCommentOutput> call, Throwable t) {
        showToast(t.getMessage());
    }

    @Override
    public void getCommentListSuccess(Response<GetAllPostCommentOutput> response) {
        if (response != null) {
            GetAllPostCommentOutput body = response.body();
            if (body != null) {
                getlist = body.getComments();
                if (getlist != null) {
                    getcommentList = getlist;
                    setAdapter(mCommentsRecyclerView, getlist);
                    text.setVisibility(View.GONE);
                } else {
                    text.setVisibility(View.VISIBLE);

                }
            } else {
                showToast(R.string.server_error_msg);
            }
        } else {
            showToast(R.string.server_error_msg);
        }

    }

    @Override
    public boolean onMenuItemClick(MenuItem item) {
        int id = item.getItemId();

        switch (id) {
            case R.id.deletePost:
                hitDeleteApi();
                break;
            case R.id.cancel:
                popup.dismiss();
                break;
            case R.id.report_post:
                showToast("Coming Soon");
                break;
        }
        popup.show();//showing popup menu
        return false;
    }

    private void hitDeleteApi() {
        DeletePostPresenter deletePostPresenter = new DeletePostPresenter(this, this);
        deletePostPresenter.responseCheck(postId);
    }

    @Override
    public void repostError(Call<RepostPostResponse> call, Throwable t) {

    }

    @Override
    public void onRepostSuccess(Response<RepostPostResponse> response) {

    }

    @Override
    public void deletePostError(Call<DeletePostResponse> call, Throwable t) {

    }

    @Override
    public void onDeletePostSuccess(Response<DeletePostResponse> response) {

    }

    @Override
    public void getCounts(int pos, PostCountResponse postCountResponse) {
        likeCount.setText(postCountResponse.getPost().getLikeCount());
        commentCount.setText(postCountResponse.getPost().getCommentCount());
        repostCount.setText(postCountResponse.getPost().getRepostCount());
    }

    @Override
    public void countsError(String error) {
        showToast(error);
    }
}