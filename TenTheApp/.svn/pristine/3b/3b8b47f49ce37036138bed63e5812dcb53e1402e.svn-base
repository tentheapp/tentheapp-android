package com.nvcomputers.ten.views.home;

import android.content.Intent;
import android.support.v4.app.Fragment;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.View;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.engine.DiskCacheStrategy;
import com.nvcomputers.ten.R;
import com.nvcomputers.ten.adapter.NewsPostAdapter;
import com.nvcomputers.ten.interfaces.AppCommonCallback;
import com.nvcomputers.ten.model.output.NewsFeedOutput;
import com.nvcomputers.ten.presenter.NewFeedPresenter;
import com.nvcomputers.ten.utils.DateTimeUtil;
import com.nvcomputers.ten.utils.HttpUtils;
import com.nvcomputers.ten.utils.PreferenceKeys;
import com.nvcomputers.ten.utils.SharedPrefsHelper;
import com.nvcomputers.ten.utils.Utilities;
import com.nvcomputers.ten.views.core.BaseFragment;
import com.nvcomputers.ten.views.search.SearchFragment;

import java.util.ArrayList;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

import jp.wasabeef.glide.transformations.RoundedCornersTransformation;
import retrofit2.Call;
import retrofit2.Response;

/**
 * A simple {@link Fragment} subclass.
 * Activities that contain this fragment must implement the
 * to handle interaction events.
 * create an instance of this fragment.
 */
public class PostListFragment extends BaseFragment implements View.OnClickListener, AppCommonCallback,
        NewFeedPresenter.NewsFeedCallback {

    private RelativeLayout user_badge_layout;
    private RecyclerView recyclerViewPosts;
    private Button btnDrawerAnimation;
    private ImageView userimage;
    private ImageButton refresh_bttn;
    private SwipeRefreshLayout swipeRefreshLayout;
    private List<NewsFeedOutput.Posts> newsFeedOutput;
    private Timer timer;
    private NewsPostAdapter adapter;
    private SharedPrefsHelper sharedPref;
    private BaseFragment baseFrament;
    private ProgressBar progress_main;

    @Override
    protected int getLayoutId() {
        return R.layout.fragment_post_list;
    }

   /* @Override
    public void onResume() {
        super.onResume();
        loadData();
    }*/

    @Override
    protected void initViews(View view) {
        sharedPref = new SharedPrefsHelper(mContext);
        progress_main = (ProgressBar)view.findViewById(R.id.progress_main);
        btnDrawerAnimation = (Button) view.findViewById(R.id.btnWindowAnimation);
        btnDrawerAnimation.setOnClickListener(this);
        refresh_bttn = (ImageButton) view.findViewById(R.id.refresh_bttn);
        refresh_bttn.setOnClickListener(this);
        user_badge_layout = (RelativeLayout) view.findViewById(R.id.user_badge_layout);
        user_badge_layout.setVisibility(View.VISIBLE);
        userimage = (ImageView) view.findViewById(R.id.userimage);
        TextView username = (TextView) view.findViewById(R.id.username);
        String usernameStr = sharedPref.get(PreferenceKeys.PREF_USER_NAME, "");
        username.setText(usernameStr);
        Glide.with(mContext)
                .load(HttpUtils.getProfileImageURL(usernameStr))
                .bitmapTransform(new RoundedCornersTransformation(mContext, 10, 10))
                .diskCacheStrategy(DiskCacheStrategy.NONE)
                .skipMemoryCache(true)
                .into(userimage);
        swipeRefreshLayout = (SwipeRefreshLayout) view.findViewById(R.id.swipeRefreshLayout);
        swipeRefreshLayout.setVisibility(View.GONE);
        swipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
            @Override
            public void onRefresh() {
                //swipeRefreshLayout.setVisibility(View.VISIBLE);
                loadData();
            }
        });
        //swipeRefreshLayout.setVisibility(View.GONE);
        recyclerViewPosts = (RecyclerView) view.findViewById(R.id.recyclerViewPosts);
        RecyclerView.LayoutManager manager = new LinearLayoutManager(mContext);
        recyclerViewPosts.setLayoutManager(manager);
        findViewById(R.id.post_search).setOnClickListener(this);
        findViewById(R.id.home_frame_layout);
        loadData();
        baseFrament = this;
    }

    private void loadData() {
        if (!Utilities.checkInternet(this.getActivity())) {
            showToast(R.string.no_internet_msg);
        } else {
            NewFeedPresenter presenter = new NewFeedPresenter(this, this);
            presenter.hitApi();
        }
    }

    @Override
    public void dispose() {
        cancelTimer();
    }


    @Override
    public void onClick(View v) {

        switch (v.getId()) {
            case R.id.post_search:
                replaceChildFragment(R.id.home_frame_layout, new SearchFragment(), null);
                break;
            case R.id.btnWindowAnimation:
                Intent intent = new Intent(mContext, TimedPostActivity.class);
                startActivity(intent);
                break;
            case R.id.refresh_bttn:
                loadData();
                break;
        }
    }

    @Override
    public void setProgressBar() {
        //showDialog();
        progress_main.setVisibility(View.VISIBLE);
    }

    @Override
    public void dismiss() {
        //hideDialog();
        progress_main.setVisibility(View.GONE);
    }

    @Override
    public void onError(Call<NewsFeedOutput> call, Throwable t) {
        //hideDialog();
        progress_main.setVisibility(View.GONE);
        swipeRefreshLayout.setRefreshing(false);
    }

    @Override
    public void onSuccess(Response<NewsFeedOutput> response) {
        swipeRefreshLayout.setRefreshing(false);
        //swipeRefreshLayout.setVisibility(View.GONE);
        if (response != null) {
            NewsFeedOutput body = response.body();
            if (body != null) {
                cancelTimer();
                ArrayList<NewsFeedOutput.Posts> posts = body.getPosts();
                if (posts != null && posts.size() > 0) {
                    newsFeedOutput = posts;
                    user_badge_layout.setVisibility(View.GONE);
                    swipeRefreshLayout.setVisibility(View.VISIBLE);
                    adapter = new NewsPostAdapter(this, posts, R.id.home_frame_layout);
                    recyclerViewPosts.setAdapter(adapter);
                    timer = new Timer();
                    timer.schedule(new TimerTask() {
                        @Override
                        public void run() {
                            checkPostExpiration();
                        }
                    }, 0, 5000);
                } else {
                    user_badge_layout.setVisibility(View.VISIBLE);
                    swipeRefreshLayout.setVisibility(View.GONE);
                    posts = new ArrayList<>();
                    adapter = new NewsPostAdapter(this, posts, R.id.home_frame_layout);
                    recyclerViewPosts.setAdapter(adapter);
                    cancelTimer();
                }
            }
        }
    }

    @Override
    public void onPause() {
        super.onPause();

    }

    @Override
    public void onResume() {
        super.onResume();

    }

    private void checkPostExpiration() {
        final List<NewsFeedOutput.Posts> postList = adapter.getPostList();
        final List<String> expiredPostId = new ArrayList<>();
        for (int i = 0; i < postList.size(); i++) {
            NewsFeedOutput.Posts post = postList.get(i);
            if (DateTimeUtil.checkExpiration(post.getExpiration())) {
                //loadData();
                //cancelTimer();
                expiredPostId.add(post.getIdPost());
                break;
            }
        }
        for (int i = 0; i < expiredPostId.size(); i++) {
            for (int j = 0; j < postList.size(); j++) {
                if (expiredPostId.get(i).equals(postList.get(j).getIdPost())) {
                    postList.remove(j);
                    break;
                }
            }
        }
        activity.runOnUiThread(new Runnable() {
            @Override
            public void run() {
                try {
                    adapter.updateList(postList);
                    if (expiredPostId.size()>0){
                        adapter = new NewsPostAdapter(baseFrament, postList, R.id.home_frame_layout);
                        recyclerViewPosts.setAdapter(adapter);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    @Override
    public void reLoadList() {
        super.reLoadList();
        loadData();
    }

    private void cancelTimer() {
        if (timer != null) {
            try {
                timer.cancel();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    @Override
    public void notifyList(int position) {
        newsFeedOutput.get(position).setLiked(true);
    }
}
