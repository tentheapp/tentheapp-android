package com.nvcomputers.ten.adapter;

import android.content.Intent;
import android.os.Bundle;
import android.support.v7.widget.RecyclerView;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.engine.DiskCacheStrategy;
import com.bumptech.glide.signature.StringSignature;
import com.nvcomputers.ten.R;
import com.nvcomputers.ten.api.GetRestAdapter;
import com.nvcomputers.ten.model.output.SearchUsersResponse;
import com.nvcomputers.ten.model.output.UnFollowResponse;
import com.nvcomputers.ten.utils.HttpUtils;
import com.nvcomputers.ten.utils.PreferenceKeys;
import com.nvcomputers.ten.utils.SharedPrefsHelper;
import com.nvcomputers.ten.utils.Utilities;
import com.nvcomputers.ten.views.core.BaseActivity;
import com.nvcomputers.ten.views.core.BaseFragment;
import com.nvcomputers.ten.views.home.PostDetailBaseActivity;
import com.nvcomputers.ten.views.profile.ProfileActivity;
import com.nvcomputers.ten.views.profile.ProfileFragment;

import java.util.ArrayList;

import jp.wasabeef.glide.transformations.RoundedCornersTransformation;
import retrofit2.Call;
import retrofit2.Callback;

/**
 * This class is used to show ten users  adapter
 *
 * @author jindaldipanshu
 * @version 1.0
 */

public class SearchAdapter extends RecyclerView.Adapter<SearchAdapter.ViewHolder> {

    private SharedPrefsHelper sharedPref;
    private ArrayList<SearchUsersResponse.Users> mList;
    private BaseActivity mActivity;
    private BaseFragment mBaseFragment;


    public SearchAdapter(BaseActivity context, ArrayList<?> mList) {
        this.mList = (ArrayList<SearchUsersResponse.Users>) mList;
        mActivity = context;
        sharedPref = new SharedPrefsHelper(mActivity);
    }

    public SearchAdapter(BaseFragment context, ArrayList<?> mList) {
        this.mList = (ArrayList<SearchUsersResponse.Users>) mList;
        mBaseFragment = context;
        this.mActivity = context.getBaseActivity();
        sharedPref = new SharedPrefsHelper(mActivity);
    }

    @Override
    public SearchAdapter.ViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {
        View itemLayoutView = LayoutInflater.from(viewGroup.getContext())
                .inflate(R.layout.row_following, null);
        // create ViewHolder
        SearchAdapter.ViewHolder viewHolder = new SearchAdapter.ViewHolder(itemLayoutView);
        return viewHolder;
    }

    @Override
    public void onBindViewHolder(SearchAdapter.ViewHolder viewHolder, int position) {

        String imageTag = sharedPref.get(PreferenceKeys.PREF_IMAGE_TAG, "");
        Glide.with(mActivity)
                .load(HttpUtils.getProfileImageURL(mList.get(position).getUsername()))
                .bitmapTransform(new RoundedCornersTransformation(mActivity, 20, 15))
                .placeholder(R.drawable.myprofilelarge)
                .diskCacheStrategy(DiskCacheStrategy.RESULT)
                .signature(new StringSignature(imageTag))
                .into(viewHolder.mUserImagView);

        String userName = mList.get(position).getUsername();

        viewHolder.mUserNameTextView.setText(userName);


        String friendId = mList.get(position).getFriended();
        if (TextUtils.isEmpty(friendId)) {
            viewHolder.mFollowingTextView.setText("Follow");
            viewHolder.mFollowingTextView.setTextColor(mActivity.getResources().getColor(R.color.colorPrimary));
            viewHolder.mFollowingTextView.setBackground(mActivity.getResources().getDrawable(R.drawable.rounded_btn_white));
        } else if (friendId.contains(mActivity.getString(R.string.friended_friended))) {
            viewHolder.mFollowingTextView.setText("Following");
            viewHolder.mFollowingTextView.setTextColor(mActivity.getResources().getColor(android.R.color.white));
            viewHolder.mFollowingTextView.setBackground(mActivity.getResources().getDrawable(R.drawable.rounded_btn_green));
        } else if (friendId.contains(mActivity.getString(R.string.friended_pending))) {
            viewHolder.mFollowingTextView.setText("Requested");
            viewHolder.mFollowingTextView.setTextColor(mActivity.getResources().getColor(android.R.color.white));
            viewHolder.mFollowingTextView.setBackground(mActivity.getResources().getDrawable(R.drawable.rounded_btn_black_filled));
        } else if (friendId.contains(mActivity.getString(R.string.friended_rejected)) ||
                friendId.contains(mActivity.getString(R.string.friended_none))
                ) {
            viewHolder.mFollowingTextView.setText("Follow");
            viewHolder.mFollowingTextView.setTextColor(mActivity.getResources().getColor(R.color.colorPrimary));
            viewHolder.mFollowingTextView.setBackground(mActivity.getResources().getDrawable(R.drawable.rounded_btn_white));
        }
    }

    @Override
    public int getItemCount() {
        return mList == null ? 0 : mList.size();
    }

    public class ViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {

        private TextView mUserNameTextView, mFollowingTextView;
        private ImageView mUserImagView;

        public ViewHolder(View itemView) {
            super(itemView);
            mUserImagView = (ImageView) itemView.findViewById(R.id.image_view_user);
            mUserNameTextView = (TextView) itemView.findViewById(R.id.text_view_usernm);
            mFollowingTextView = (TextView) itemView.findViewById(R.id.text_view_follow);
            mFollowingTextView.setOnClickListener(this);
            mUserImagView.setOnClickListener(this);
        }


        @Override
        public void onClick(View view) {
            int position = getLayoutPosition();
            switch (view.getId()) {
                case R.id.image_view_user:
                    if (mBaseFragment == null) {
                        Intent intent = new Intent(mActivity, ProfileActivity.class);
                        intent.putExtra("username", mList.get(position).getUsername());
                        mActivity.startActivity(intent);
                    } else {
                        Bundle bundle = new Bundle();
                        bundle.putString("username", mList.get(position).getUsername());
                        mBaseFragment.replaceChildFragment(R.id.frame_layout_search, new ProfileFragment(), bundle);
                    }
                    break;
                case R.id.text_view_follow:
                    String friendId = mList.get(position).getFriended();
                    if (!Utilities.checkInternet(mActivity)) {
                        mActivity.showToast(R.string.no_internet_msg);
                    } else {
                        if (friendId.contains(mActivity.getString(R.string.friended_friended))) {
                            unFollowResponse(position, mList.get(position).getIdUser());
                        } else if (friendId.contains(mActivity.getString(R.string.friended_pending))) {
                            unFollowResponse(position, mList.get(position).getIdUser());
                        } else if (friendId.contains(mActivity.getString(R.string.friended_rejected)) ||
                                friendId.contains(mActivity.getString(R.string.friended_none))
                                ) {
                            followResponse(position, mList.get(position).getIdUser());
                        }
                    }

                    break;
            }
        }
    }

    private void unFollowResponse(final int position, String idUser) {
        Call<UnFollowResponse> response = GetRestAdapter.getRestAdapter(true).unfollowUser(idUser);
        response.enqueue(new Callback<UnFollowResponse>() {
            @Override
            public void onResponse(Call<UnFollowResponse> call,
                                   retrofit2.Response<UnFollowResponse> response) {
                if (response != null && response.body() != null) {
                    if (response.body().getSuccess().contains("true")) {
                        mList.get(position).setFriended(mActivity.getString(R.string.friended_none));
                        notifyDataSetChanged();
                    }
                    mActivity.showToast(response.body().getSuccess());
                } else {
                    mActivity.showToast(R.string.server_error_msg);
                }
            }

            @Override
            public void onFailure(Call<UnFollowResponse> call, Throwable t) {
                mActivity.showToast(t.getMessage());
            }
        });
    }


    private void followResponse(final int position, String idUser) {
        Call<UnFollowResponse> response = GetRestAdapter.getRestAdapter(true).followUser(idUser);
        response.enqueue(new Callback<UnFollowResponse>() {
            @Override
            public void onResponse(Call<UnFollowResponse> call,
                                   retrofit2.Response<UnFollowResponse> response) {
                if (response != null && response.body() != null) {
                    if (response.body().getSuccess().contains("true")) {
                        if (mList.get(position).getIsPrivate().equals("true")) {
                            mList.get(position).setFriended(mActivity.getString(R.string.friended_pending));
                            notifyDataSetChanged();
                        } else {
                            mList.get(position).setFriended(mActivity.getString(R.string.friended_friended));
                            notifyDataSetChanged();
                        }
                    } else {
                        mActivity.showToast(response.body().getSuccess());
                    }
                } else {
                    mActivity.showToast(R.string.server_error_msg);
                }
            }

            @Override
            public void onFailure(Call<UnFollowResponse> call, Throwable t) {
                mActivity.showToast(t.getMessage());
            }
        });
    }


}
