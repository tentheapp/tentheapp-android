package com.nvcomputers.ten.views.home;

import android.content.Intent;
import android.support.v7.widget.RecyclerView;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.PopupMenu;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.engine.DiskCacheStrategy;
import com.nvcomputers.ten.R;
import com.nvcomputers.ten.interfaces.AppCommonCallback;
import com.nvcomputers.ten.model.output.DeletePostResponse;
import com.nvcomputers.ten.model.output.GetAllPostCommentOutput;
import com.nvcomputers.ten.model.output.PostCommentOutput;
import com.nvcomputers.ten.model.output.PostCountResponse;
import com.nvcomputers.ten.model.output.RepostPostResponse;
import com.nvcomputers.ten.presenter.DeletePostPresenter;
import com.nvcomputers.ten.presenter.GetCommentListPresenter;
import com.nvcomputers.ten.presenter.LikeCommentsCountsPresenter;
import com.nvcomputers.ten.presenter.PostCommentPresenter;
import com.nvcomputers.ten.presenter.RepostPostPresenter;
import com.nvcomputers.ten.utils.DateTimeUtil;
import com.nvcomputers.ten.utils.HttpUtils;
import com.nvcomputers.ten.utils.PreferenceKeys;
import com.nvcomputers.ten.utils.ProgressUtility;
import com.nvcomputers.ten.utils.Utilities;
import com.nvcomputers.ten.views.profile.ProfileActivity;
import com.nvcomputers.ten.views.profile.ZoomImageActivity;

import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;

import jp.wasabeef.glide.transformations.RoundedCornersTransformation;
import retrofit2.Call;
import retrofit2.Response;

public class PostDetailActivity extends PostDetailBaseActivity implements AppCommonCallback, RepostPostPresenter.RepostCallback, DeletePostPresenter.DeletePostCallback,
        GetCommentListPresenter.CommentsCallback, PostCommentPresenter.CommentCallback, View.OnClickListener,
        PopupMenu.OnMenuItemClickListener, LikeCommentsCountsPresenter.LikeCommentsCallback {

    @Override
    protected int getLayoutId() {
        return R.layout.fragment_selected_post_view;
    }

    @Override
    protected void initViews( ){
        mContext = this;
        super.initViews();
        getDataFromBundle();
        localUser = sharedPrefsHelper.get(PreferenceKeys.PREF_USER_NAME, "");
        mUserId = sharedPrefsHelper.get(PreferenceKeys.PREF_USER_ID);
        followingUser = sharedPrefsHelper.get(PreferenceKeys.PREF_FOLLOWING_LIST, "");
        registerClickListener();
        setDataOnUi();
    }


    private void setDataOnUi() {
        updateList();
        Glide.with(PostDetailActivity.this)
                .load(HttpUtils.getProfileImageURL(localUser))
                .bitmapTransform(new RoundedCornersTransformation(baseActivity, 15, 15))
                .error(R.drawable.myprofilelarge)
                .diskCacheStrategy(DiskCacheStrategy.NONE)
                .skipMemoryCache(true)
                .into(commentUserImage);
        setHashTag();
        if (likeCommentsCountsPresenter == null)
            likeCommentsCountsPresenter = new LikeCommentsCountsPresenter(this, this);

        UsernameTextView.setText(username);
        Glide.with(PostDetailActivity.this)
                .load(HttpUtils.getPostImageURL(postId))
                .into(PostImage);
        Glide.with(PostDetailActivity.this)
                .load(HttpUtils.getProfileImageURL(username))
                .bitmapTransform(new RoundedCornersTransformation(this, 15, 15))
                .error(R.drawable.myprofilelarge)
                .diskCacheStrategy(DiskCacheStrategy.NONE)
                .skipMemoryCache(true)
                .into(UserImage);

        GetCommentListPresenter presenter = new GetCommentListPresenter(this);
        presenter.responseCheck(postId);

        checkPostExpiration();
        timer = new Timer();
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                PostDetailActivity.this.runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        checkPostExpiration();
                    }
                });
            }
        }, 0, 10000);

        if (singlePost != null) {
            updatePostData();
        }

    }


    @Override
    public void onDestroy() {
        super.onDestroy();
        cancelTimer();
    }


    @Override
    public void onClick(View v) {
        String commentText = edit_text_comment.getText().toString();
        Intent intents = null;
        switch (v.getId()) {
            case R.id.topbtn:
                if (mTopBtmList != null && mTopBtmList.size() > 0) {
                    topBtmPosition--;
                    String user_id = mTopBtmList.get(topBtmPosition).getUserPoster().getIdUser();
                    mLeftRgtList = mSelectedPostPresenter.leftRightList(mList, user_id);
                    getDataFromList(mLeftRgtList, 0);
                    setDataOnUi();
                }

                break;
            case R.id.btnBottom:
                if (mTopBtmList != null && mTopBtmList.size() > 0) {
                    topBtmPosition++;
                    String user_id = mTopBtmList.get(topBtmPosition).getUserPoster().getIdUser();
                    mLeftRgtList = mSelectedPostPresenter.leftRightList(mList, user_id);
                    getDataFromList(mLeftRgtList, 0);
                    setDataOnUi();
                }
                break;

            case R.id.lefttbtn:
                if (mLeftRgtList != null && mLeftRgtList.size() > 0) {
                    leftRightPosition--;
                    getDataFromList(mLeftRgtList, leftRightPosition);
                    setDataOnUi();
                }
                break;

            case R.id.rightbtn:
                if (mLeftRgtList != null && mLeftRgtList.size() > 0) {
                    leftRightPosition++;
                    getDataFromList(mLeftRgtList, leftRightPosition);
                    setDataOnUi();
                }
                break;

            case R.id.clock:
                intents = new Intent(PostDetailActivity.this, TimersActivity.class);
                intents.putExtra("postId", postId);
                startActivity(intents);
                break;

            case R.id.timeremaining:
                intents = new Intent(PostDetailActivity.this, TimersActivity.class);
                intents.putExtra("postId", postId);
                startActivity(intents);
                break;

            case R.id.username:
                if (!mUserId.equals(userId)) {
                    Intent intent = new Intent(PostDetailActivity.this, ProfileActivity.class);
                    intent.putExtra("username", username);
                    startActivity(intent);
                }
                break;

            case R.id.comment_image:
                Utilities.hideKeypad(v);
                if (!Utilities.checkInternet(this)) {
                    showToast(R.string.no_internet_msg);
                } else if (DateTimeUtil.checkExpiration(expirationTime)) {
                    showToast("You can't add comment on expired post.");
                } else {
                    Intent intent = new Intent(PostDetailActivity.this, CommentsActivity.class);
                    intent.putExtra("postId", postId);
                    intent.putExtra("expirationTime", expirationTime);
                    if (userId.equals(mUserId))
                        intent.putExtra("isMyPost", true);
                    else {
                        intent.putExtra("isMyPost", false);
                        startActivity(intent);
                    }
                }
                break;
            case R.id.like:
                if (!userId.equals(mUserId)) {
                    if (!Utilities.checkInternet(this)) {
                        showToast(R.string.no_internet_msg);
                    } else {
                        likePost(postId);
                    }
                }
                break;
            case R.id.edit_text_comment:
                Intent intent = new Intent(PostDetailActivity.this, CommentsActivity.class);
                intent.putExtra("postId", postId);
                intent.putExtra("expirationTime", expirationTime);
                if (userId.equals(mUserId))
                    intent.putExtra("isMyPost", true);
                else
                    intent.putExtra("isMyPost", false);
                startActivity(intent);
                break;
            case R.id.postimage:
                Intent i = new Intent(PostDetailActivity.this, ZoomImageActivity.class);
                i.putExtra("image", HttpUtils.getPostImageURL(postId));
                startActivity(i);
                break;
            case R.id.image_back:
                finish();
                break;
            case R.id.action:
                showPopup(v);
                break;
            case R.id.repost:
                if (singlePost.getUserPoster().getIdUser().equals(userId)) {
                    return;
                }
                if (singlePost.getIsReposted()) {
                    return;
                }

                String expTime = DateTimeUtil.getRemainingTimeInMinutes(expirationTime);
                if (expTime.equals("Exp")) {
                    return;
                }
                repostPost(postId);
                break;
            case R.id.playBtn1:
                playVideo(singlePost.getVideoUrl());
                break;
        }
    }

    private void repostPost(String postId) {
        RepostPostPresenter repostPostPresenter = new RepostPostPresenter(this, this);
        repostPostPresenter.responseCheck(postId);
    }

    public void showPopup(View v) {
        String currentUserId = sharedPrefsHelper.get(PreferenceKeys.PREF_USER_ID);
        popup = new PopupMenu(PostDetailActivity.this, v);
        popup.setOnMenuItemClickListener(this);
        MenuInflater inflater = popup.getMenuInflater();
        if (userId.equals(currentUserId)) {
            inflater.inflate(R.menu.sameuser_menu, popup.getMenu());
        } else {
            inflater.inflate(R.menu.other_user_post_menu, popup.getMenu());
        }
        popup.show();

    }

    @Override
    public void setProgressBar() {

    }

    @Override
    public void dismiss() {
    }

    @Override
    public void dispose() {

    }

    @Override
    public void postCommmentError(Call<PostCommentOutput> call, Throwable t) {
        showToast(t.getMessage());
    }

    @Override
    public void postCommmentSuccess(Response<PostCommentOutput> response) {
        ProgressUtility.dismissProgress();
        if (response != null && response.body() != null) {
            if (response.code() == 200) {
                edit_text_comment.setText("");
                GetCommentListPresenter presenter = new GetCommentListPresenter(this);
                presenter.responseCheck(postId);
                likeCommentsCountsPresenter.countsApi(0, postId);
            } else {
                showToast(R.string.no_data_found_msg);
            }

        } else {
            showToast(R.string.server_error_msg);
        }
    }


    @Override
    public void setAdapter(RecyclerView recyclerView, ArrayList<?> mList) {
        super.setAdapter(recyclerView, mList);
        //TODO --adapter = new SelectedPostCommentAdapter(this, mList, PostDetailActivity.this);
        // mCommentsRecyclerView.setAdapter(adapter);
    }

    @Override
    public void getCommentListError(Call<GetAllPostCommentOutput> call, Throwable t) {
        showToast(t.getMessage());
    }

    @Override
    public void getCommentListSuccess(Response<GetAllPostCommentOutput> response) {
        if (response != null) {
            GetAllPostCommentOutput body = response.body();
            if (body != null) {
                getlist = body.getComments();
                if (getlist != null) {
                    getcommentList = getlist;
                    //setAdapter(mCommentsRecyclerView, getlist);
                    //text.setVisibility(View.GONE);
                } else {
                    // text.setVisibility(View.VISIBLE);

                }
            } else {
                showToast(R.string.server_error_msg);
            }
        } else {
            showToast(R.string.server_error_msg);
        }

    }

    @Override
    public boolean onMenuItemClick(MenuItem item) {
        int id = item.getItemId();

        switch (id) {
            case R.id.deletePost:
                hitDeleteApi();
                break;
            case R.id.cancel:
                popup.dismiss();
                break;
            case R.id.report_post:
                showToast("Coming Soon");
                break;
        }
        popup.show();//showing popup menu
        return false;
    }

    private void hitDeleteApi() {
        DeletePostPresenter deletePostPresenter = new DeletePostPresenter(this, this);
        deletePostPresenter.responseCheck(postId);
    }

    @Override
    public void repostError(Call<RepostPostResponse> call, Throwable t) {

    }

    @Override
    public void onRepostSuccess(Response<RepostPostResponse> response) {

    }

    @Override
    public void deletePostError(Call<DeletePostResponse> call, Throwable t) {

    }

    @Override
    public void onDeletePostSuccess(Response<DeletePostResponse> response) {

    }

    @Override
    public void getCounts(int pos, PostCountResponse postCountResponse) {
        likeCount.setText(String.valueOf(postCountResponse.getPost().getLikeCount()));
        commentCount.setText(String.valueOf(postCountResponse.getPost().getCommentCount()));
        repostCount.setText(String.valueOf(postCountResponse.getPost().getRepostCount()));
    }

    @Override
    public void countsError(String error) {
        showToast(error);
    }

    private void registerClickListener() {

        findViewById(R.id.title_layout).setOnClickListener(this);
        leftBtn.setOnClickListener(this);
        rightBtn.setOnClickListener(this);
        topBtn.setOnClickListener(this);
        bottomBtn.setOnClickListener(this);
        leftScrollBtn.setOnClickListener(this);
        rightScrollBtn.setOnClickListener(this);
        edit_text_comment.setOnClickListener(this);
        RepostImage.setOnClickListener(this);
        commentImage.setOnClickListener(this);
        imageBack.setOnClickListener(this);
        action.setOnClickListener(this);
        UsernameTextView.setOnClickListener(this);
        LikeImage.setOnClickListener(this);
        playBtn.setOnClickListener(this);
        TimeRemainingTextView.setOnClickListener(this);
        findViewById(R.id.clock).setOnClickListener(this);
    }
}