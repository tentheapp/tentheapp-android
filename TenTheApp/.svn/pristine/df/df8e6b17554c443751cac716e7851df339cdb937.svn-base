package com.nvcomputers.ten.views.post;

import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.SurfaceTexture;
import android.hardware.Camera;
import android.net.Uri;
import android.util.Log;
import android.view.MotionEvent;
import android.view.TextureView;
import android.view.View;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.Toast;

import com.adobe.creativesdk.aviary.AdobeImageIntent;
import com.nvcomputers.ten.R;
import com.nvcomputers.ten.api.GetRestAdapter;
import com.nvcomputers.ten.model.output.EditProfileResponse;
import com.nvcomputers.ten.utils.FileUtils;
import com.nvcomputers.ten.utils.ProgressUtility;
import com.nvcomputers.ten.views.core.BaseActivity;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Random;

import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import retrofit2.Call;
import retrofit2.Callback;

import static android.hardware.Camera.CameraInfo.CAMERA_FACING_BACK;
import static android.hardware.Camera.CameraInfo.CAMERA_FACING_FRONT;

public class CameraUploadActivity extends BaseActivity implements View.OnClickListener, TextureView.SurfaceTextureListener,
        View.OnTouchListener, Camera.PictureCallback {

    private static final int IMAGE_EDITER = 155;
    SurfaceTexture surfaceTexture;
    ImageView mCapturedImgView, closeBtn, dot1, dot2, dot3, dot4, flipImageView, directPostImageView, flashImageView, takePictureImageView;
    TextureView textureView;
    Camera camera;
    Context mContext;
    public static Uri editedImageUri = null;
    File selectedfile;
    Boolean imageCaptured;
    boolean cameraStarted = false, cameraIsFront = false;
    String tempFileName, PictureFilePath = null, btnMode = "camera", image_name;
    private int frontCamera = -1;
    private int rearCamera = -1;
    private int currentCamera = 0;
    private String picturePath;
    private boolean isImageCaptured, isFilterStarted, isUploadStarted;
    private ProgressBar photo_saving_progress;

    @Override
    public void dispose() {
    }

    @Override
    protected int getLayoutId() {
        return R.layout.activity_camera;
    }

    @Override
    protected void initViews() {
        closeBtn = (ImageView) findViewById(R.id.close);
        closeBtn.setOnClickListener(this);
        dot1 = (ImageView) findViewById(R.id.dot1);
        dot2 = (ImageView) findViewById(R.id.dot2);
        dot3 = (ImageView) findViewById(R.id.dot3);
        dot4 = (ImageView) findViewById(R.id.dot4);
        photo_saving_progress = (ProgressBar) findViewById(R.id.photo_saving_progress);
        mCapturedImgView = (ImageView) findViewById(R.id.image_view_captured);
        mCapturedImgView.setVisibility(View.GONE);
        takePictureImageView = (ImageView) findViewById(R.id.picture);
        takePictureImageView.setOnClickListener(this);
        flipImageView = (ImageView) findViewById(R.id.flip);
        flipImageView.setOnClickListener(this);
        flipImageView.setImageResource(R.drawable.flipcamera);
        flashImageView = (ImageView) findViewById(R.id.flash);
        flashImageView.setOnClickListener(this);
      /*  if (camera == null)
            camera = Camera.open(0);
        camera.setDisplayOrientation(90);*/
        textureView = (TextureView) findViewById(R.id.textureView);
        textureView.setSurfaceTextureListener(this);
        directPostImageView = (ImageView) findViewById(R.id.comment);
        directPostImageView.setOnClickListener(this);
        takePictureImageView.setOnTouchListener(this);
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.close:
                if (isImageCaptured) {
                    startPreview();
                    /*if (videoPlayer.IsPlaying)
                    {
                        videoPlayer.StopPlayback();
                    }*/
                    //videoPlayer.Visibility = ViewStates.Gone;
                } else {
                    finish();
                }
                break;
            case R.id.flash:
                if (cameraStarted) {
                    changeFlashMode();
                }
                break;
            case R.id.flip:
                flipCamera();
                break;
            case R.id.comment:
                break;
            default:
                break;
        }
    }

    private void changeFlashMode() {
        Camera.Parameters parameters = camera.getParameters();

        /*if (ExifInterface.Flash.euals(android.hardware.Camera.Parameters.FlashModeOff, StringComparison.InvariantCultureIgnoreCase))
        {
            //Flash = android.hardware.Camera.Parameters.FlashModeOn;
            flashImageView.setImageResource(R.drawable.flash);
        }
        else {
            //Flash = android.hardware.Camera.Parameters.FlashModeOff;
            flashImageView.setImageResource(R.drawable.noflash);
        }
        parameters.FlashMode = Flash;*/
        camera.setParameters(parameters);
    }


    @Override
    public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {
        surfaceTexture = surface;

        Camera.CameraInfo camInfo = new Camera.CameraInfo();
        for (int camId = 0; camId < Camera.getNumberOfCameras(); camId++) {
            Camera.getCameraInfo(camId, camInfo);
            if (camInfo.facing == CAMERA_FACING_FRONT) {
                frontCamera = camId;
            }
            if (camInfo.facing == CAMERA_FACING_BACK) {
                rearCamera = camId;
            }
        }
        currentCamera = rearCamera;
        camera = Camera.open(currentCamera);
        //camera.open(0);
        //if (isPreviewRunning) {
        try {
            camera.stopPreview();
        } catch (Exception e) {
            e.printStackTrace();
        }
        //}
        FileUtils.setCameraDisplayOrientation(this, currentCamera, camera);
        textureView.setLayoutParams(new RelativeLayout.LayoutParams(width, height));
        startPreview();
    }


    private void flipCamera() {
        if (currentCamera == frontCamera && rearCamera != -1) {
            if (camera != null) {
                camera.stopPreview();
                camera.release();
                camera = null;
            }
            camera = Camera.open(rearCamera);
            currentCamera = rearCamera;
            FileUtils.setCameraDisplayOrientation(this, currentCamera, camera);//setCameraOrientation(mWidth, mHeight);
            //textureView.setLayoutParams(new RelativeLayout.LayoutParams(mWidth, mHeight));
            startPreview();
        } else if (frontCamera != -1) {
            if (camera != null) {
                camera.stopPreview();
                camera.release();
                camera = null;
            }
            camera = Camera.open(frontCamera);
            currentCamera = frontCamera;
            FileUtils.setCameraDisplayOrientation(this, currentCamera, camera);//setCameraOrientation(mWidth, mHeight);
            //textureView.setLayoutParams(new RelativeLayout.LayoutParams(mWidth, mHeight));
            startPreview();
        }
    }

    private void startPreview() {
        try {

            if (camera == null) {
                camera = Camera.open(currentCamera);
                FileUtils.setCameraDisplayOrientation(this, currentCamera, camera);//setCameraOrientation(mWidth, mHeight);// setCameraOrientation(mWidth, mHeight);
                //textureView.setLayoutParams(new RelativeLayout.LayoutParams(mWidth, mHeight));
                //camera.setDisplayOrientation(90);
            }
            // camera.unlock();
            camera.setPreviewTexture(surfaceTexture);
            camera.startPreview();
            takePictureImageView.setImageResource(R.drawable.ic_camerabutton);

            flipImageView.setVisibility(View.VISIBLE);
            flipImageView.setImageResource(R.drawable.flipcamera);

            mCapturedImgView.setVisibility(View.INVISIBLE);
            directPostImageView.setVisibility(View.INVISIBLE);
            flashImageView.setVisibility(View.INVISIBLE);
            dot1.setVisibility(View.INVISIBLE);
            dot2.setVisibility(View.INVISIBLE);
            dot3.setVisibility(View.INVISIBLE);
            dot4.setVisibility(View.INVISIBLE);
            cameraStarted = true;
            isImageCaptured = false;
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {

    }

    @Override
    public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {
        if (camera != null) {
            camera.stopPreview();
            camera.release();
            camera = null;
        }
        return true;
    }

    @Override
    public void onSurfaceTextureUpdated(SurfaceTexture surface) {

    }

    @Override
    public boolean onTouch(View v, MotionEvent event) {
        Float dx = 0.0f;
        switch (event.getAction()) {
            case MotionEvent.ACTION_UP:
                v.animate().translationX(0).setDuration(100).start();
                break;

            case MotionEvent.ACTION_DOWN:
                dx = event.getRawX();
                Log.e("ACTION_DOWN--", dx + "");
                if (!isImageCaptured) {
                    capureImage();
                }

                break;
            case MotionEvent.ACTION_MOVE:
                Float change = event.getRawX() + dx - takePictureImageView.getLayoutParams().width / 2;
                if (change > flipImageView.getX()) {
                    //direct upload
                    if (!isUploadStarted)
                        uploadImageDirectly();
                } else if (change < directPostImageView.getX()) {
                    if (!isFilterStarted) {
                        // filter
                        isFilterStarted = true;
                        Uri mSelectedImageUri = Uri.fromFile(selectedfile);
                        Intent imageEditorIntent = new AdobeImageIntent.Builder(this)
                                .setData(mSelectedImageUri)
                                .build();
                        startActivityForResult(imageEditorIntent, IMAGE_EDITER);
                    }
                } else {
                    v.animate().x(change).setDuration(0).start();

                }

                break;
            case MotionEvent.ACTION_CANCEL:
                Toast.makeText(this, "action cancel", Toast.LENGTH_SHORT).show();
                break;
        }
        return true;
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == IMAGE_EDITER) {
            editedImageUri = data.getParcelableExtra(AdobeImageIntent.EXTRA_OUTPUT_URI);
            //  picturePath =  (getRealPathFromURI(this,editedImageUri));
            finish();

        }
    }

    private void capureImage() {
        camera.takePicture(null, this, this);
    }


    @Override
    public void onPictureTaken(byte[] data, Camera camera) {

        if (data == null) {
            return;
        }
        isImageCaptured = true;
        isFilterStarted = false;
        isUploadStarted = false;
        // startCameraPreview();
        Random rndm = new Random();
        int rndomNumber = rndm.nextInt();
        selectedfile = new File(getExternalFilesDir(null), rndomNumber + ".jpeg");
        picturePath = selectedfile.getAbsolutePath();
        // Glide.with(this).load(file).into(mCapturedImgView);
        ///textureView.setba
        saveImageLocally(data);

    }

    private void saveImageLocally(final byte[] data) {
        mCapturedImgView.setVisibility(View.VISIBLE);
        photo_saving_progress.setVisibility(View.VISIBLE);
        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                Bitmap bmp = null;
                try {
                    saveToSdcard(data);
                    Bitmap myBitmap = BitmapFactory.decodeFile(selectedfile.getAbsolutePath());
                    bmp = FileUtils.modifyOrientation(CameraUploadActivity.this, myBitmap, picturePath, currentCamera);
                    ByteArrayOutputStream stream = new ByteArrayOutputStream();
                    bmp.compress(Bitmap.CompressFormat.JPEG, 50, stream);
                    byte[] rotateddata = stream.toByteArray();
                    saveToSdcard(rotateddata);
                } catch (Exception e) {
                    e.printStackTrace();
                }

                final Bitmap finalBmp = bmp;
                CameraUploadActivity.this.runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        mCapturedImgView.setImageBitmap(finalBmp);
                        photo_saving_progress.setVisibility(View.GONE);
                        dot1.setVisibility(View.VISIBLE);
                        dot2.setVisibility(View.VISIBLE);
                        dot3.setVisibility(View.VISIBLE);
                        dot4.setVisibility(View.VISIBLE);
                        directPostImageView.setVisibility(View.VISIBLE);
                        flipImageView.setVisibility(View.VISIBLE);
                        flipImageView.setImageResource(R.drawable.homewhite);
                    }
                });
            }
        });
        thread.start();
    }

    private void saveToSdcard(byte[] data) {
        try {
            FileOutputStream outStream = new FileOutputStream(selectedfile);
            outStream.write(data);
            outStream.close();
            outStream = null;

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    private void uploadImageDirectly() {

        ProgressUtility.showProgress(this, getString(R.string.please_wait_meassge));
        RequestBody description = RequestBody.create(MultipartBody.FORM, "");
        Call<EditProfileResponse> response = null;
        isUploadStarted = true;
        RequestBody requestBody = RequestBody.create(MediaType.parse("image/jpeg"), selectedfile);
        MultipartBody.Part filePart = MultipartBody.Part.createFormData("imageFile", selectedfile.getName(), requestBody);
        response = GetRestAdapter.getRestAdapter(true).uploadImagePost(description, filePart);

        response.enqueue(new Callback<EditProfileResponse>() {
            @Override
            public void onResponse(Call<EditProfileResponse> call, retrofit2.Response<EditProfileResponse> response) {
                ProgressUtility.dismissProgress();
                if (response.code() == 200) {
                    showToast("Post Uploaded Successfully");
                    if (selectedfile != null && selectedfile.exists()) {
                        selectedfile.delete();
                    }
                    selectedfile = null;
                } else {
                    showToast("" + response.message());
                }
                finish();
            }

            @Override
            public void onFailure(Call<EditProfileResponse> call, Throwable t) {
                ProgressUtility.dismissProgress();
                showToast(t.getMessage());

            }
        });
    }

   /* public Bitmap rotateBitmap(Bitmap bmpBow, float angle) {
        Matrix matrix = new Matrix();
        matrix.setRotate(angle);
        Bitmap bmpBowRotated = Bitmap.createBitmap(bmpBow, 0, 0, bmpBow.getWidth(), bmpBow.getHeight(), matrix, false);
        return bmpBowRotated;
    }*/

}
