package com.nvcomputers.ten.views.post;

import android.app.ProgressDialog;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.net.Uri;
import android.os.Environment;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.SeekBar;
import android.widget.TextView;
import android.widget.Toast;

import com.nvcomputers.ten.R;
import com.nvcomputers.ten.utils.FileUtils;
import com.nvcomputers.ten.utils.Utilities;
import com.nvcomputers.ten.views.core.BaseActivity;

import java.io.File;

import jp.co.cyberagent.android.gpuimage.GPUImage;
import jp.co.cyberagent.android.gpuimage.GPUImage3x3ConvolutionFilter;
import jp.co.cyberagent.android.gpuimage.GPUImageColorInvertFilter;
import jp.co.cyberagent.android.gpuimage.GPUImageContrastFilter;
import jp.co.cyberagent.android.gpuimage.GPUImageEmbossFilter;
import jp.co.cyberagent.android.gpuimage.GPUImageFilter;
import jp.co.cyberagent.android.gpuimage.GPUImageGammaFilter;
import jp.co.cyberagent.android.gpuimage.GPUImageGrayscaleFilter;
import jp.co.cyberagent.android.gpuimage.GPUImageHueFilter;
import jp.co.cyberagent.android.gpuimage.GPUImageMonochromeFilter;
import jp.co.cyberagent.android.gpuimage.GPUImageOpacityFilter;
import jp.co.cyberagent.android.gpuimage.GPUImagePixelationFilter;
import jp.co.cyberagent.android.gpuimage.GPUImagePosterizeFilter;
import jp.co.cyberagent.android.gpuimage.GPUImageSaturationFilter;
import jp.co.cyberagent.android.gpuimage.GPUImageSepiaFilter;
import jp.co.cyberagent.android.gpuimage.GPUImageSharpenFilter;
import jp.co.cyberagent.android.gpuimage.GPUImageView;
import life.knowledge4.videotrimmer.K4LVideoTrimmer;
import life.knowledge4.videotrimmer.interfaces.OnK4LVideoListener;
import life.knowledge4.videotrimmer.interfaces.OnTrimVideoListener;


public class GpuImageFiltersActivity extends BaseActivity implements SeekBar.OnSeekBarChangeListener,
        View.OnClickListener, GPUImageView.OnPictureSavedListener {

    Bitmap selectedImageBitmap;
    String imagePath, selphie, mode;
    File imageFile;
    ProgressDialog progress;
    private GPUImageFilter mFilter;
   
    //to - do apply filter tools adjuster
    
    // private jp.co.cyberagent.android.gpuimage.GPUImageFilterTools.FilterAdjuster mFilterAdjuster;
    TextView done_btn;
    public static String savedfilePath;
    //views
    private static int REQUEST_PICK_IMAGE = 1;
    GPUImageView photo, filter1, filter2, filter3, filter4, filter5, filter6, filter7, filter8, filter9, filter10, filter11, filter12, filter13, filter14, filter15;
    LinearLayout f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15;
    TextView normal, Sepia, Hue, Gamma, Emboss, Opacity, Chrome, Contrast, Invert, Pixel, Gray, Sharpen, Convolution, Posterize,
            Saturation;



    private GPUImage.ScaleType mScaleType = GPUImage.ScaleType.CENTER_CROP;

    @Override
    public void dispose() {

    }

    @Override
    protected int getLayoutId() {
        return R.layout.gpu_image_filters_layout;
    }

    @Override
    protected void initViews() {
//  //    //linear layouts

        Intent intent = getIntent();
        imagePath = intent.getStringExtra("SelectedImagePath");
        selphie = intent.getStringExtra("selphie");
        mode = intent.getStringExtra("mode");

        f1 = (LinearLayout)findViewById(R.id.f1);
        f2 = (LinearLayout)findViewById(R.id.f2);
        f3 = (LinearLayout)findViewById(R.id.f3);
        f4 = (LinearLayout)findViewById(R.id.f4);
        f5 = (LinearLayout)findViewById(R.id.f5);
        f6 = (LinearLayout)findViewById(R.id.f6);
        f7 = (LinearLayout)findViewById(R.id.f7);
        f8 = (LinearLayout)findViewById(R.id.f8);
        f9 = (LinearLayout)findViewById(R.id.f9);
        f10 = (LinearLayout)findViewById(R.id.f10);
        f11 = (LinearLayout)findViewById(R.id.f11);
        f12 = (LinearLayout)findViewById(R.id.f12);
        f13 = (LinearLayout)findViewById(R.id.f13);
        f14 = (LinearLayout)findViewById(R.id.f14);
        f15 = (LinearLayout)findViewById(R.id.f15);

        //gpu image views
        photo = (GPUImageView)findViewById(R.id.imageFilter);
        filter1 = (GPUImageView)findViewById(R.id.filter1);
        filter2 = (GPUImageView)findViewById(R.id.filter2);
        filter3 = (GPUImageView)findViewById(R.id.filter3);
        filter4 = (GPUImageView)findViewById(R.id.filter4);
        filter5 = (GPUImageView)findViewById(R.id.filter5);
        filter6 = (GPUImageView)findViewById(R.id.filter6);
        filter7 = (GPUImageView)findViewById(R.id.filter7);
        filter8 = (GPUImageView)findViewById(R.id.filter8);
        filter9 = (GPUImageView)findViewById(R.id.filter9);
        filter10 = (GPUImageView)findViewById(R.id.filter10);
        filter11 = (GPUImageView)findViewById(R.id.filter11);
        filter12 = (GPUImageView)findViewById(R.id.filter12);
        filter13 = (GPUImageView)findViewById(R.id.filter13);
        filter14 = (GPUImageView)findViewById(R.id.filter14);
        filter15 = (GPUImageView)findViewById(R.id.filter15);




        normal = (TextView)findViewById(R.id.normal);
        Sepia = (TextView)findViewById(R.id.Sepia);
        Hue = (TextView)findViewById(R.id.Hue);
        Gamma = (TextView)findViewById(R.id.Gamma);
        Emboss = (TextView)findViewById(R.id.Emboss);
        Opacity = (TextView)findViewById(R.id.Opacity);
        Chrome = (TextView)findViewById(R.id.Chrome);
        Contrast = (TextView)findViewById(R.id.Contrast);
        Invert = (TextView)findViewById(R.id.Invert);
        Pixel = (TextView)findViewById(R.id.Pixel);
        Gray = (TextView)findViewById(R.id.Gray);
        Sharpen = (TextView)findViewById(R.id.Sharpen);
        Convolution = (TextView)findViewById(R.id.Convolution);
        Saturation = (TextView)findViewById(R.id.Saturation);
        Posterize = (TextView)findViewById(R.id.Posterize);
        // done button 
        done_btn =(TextView)findViewById(R.id.done_btn);


        //listeners
        //initialize listeners

        filter1.setOnClickListener(this);
        filter2.setOnClickListener(this);
        filter3.setOnClickListener(this);
        filter4.setOnClickListener(this);
        filter5.setOnClickListener(this);
        filter6.setOnClickListener(this);
        filter7.setOnClickListener(this);
        filter8.setOnClickListener(this);
        filter9.setOnClickListener(this);
        filter10.setOnClickListener(this);
        filter11.setOnClickListener(this);
        filter12.setOnClickListener(this);
        filter13.setOnClickListener(this);
        filter14.setOnClickListener(this);
        filter15.setOnClickListener(this);
        done_btn.setOnClickListener(this);

        progress = new ProgressDialog(this);
        setBitmaps();
        setFilterEffectsOnList();
        filter1.setClickable(true);


    }

    @Override
    public void onBackPressed() {
        super.onBackPressed();
        finish();
    }

    private void switchFilterTo(GPUImageFilter filter, int progress)
    {
        if (mFilter == null|| (filter != null && !mFilter.getClass().equals(filter.getClass())))
        {
            mFilter = filter;
            photo.setFilter(mFilter);
        }
      //  mFilterAdjuster = new GPUImageFilterTools.FilterAdjuster(mFilter);

       // if (mFilterAdjuster != null)
        //{
         //   mFilterAdjuster.Adjust(progress);
        //}*/
        photo.requestRender();
    }


    public void setFilterEffectsOnList()
    {


        filter1.setFilter( new GPUImageFilter());
        filter2.setFilter(new GPUImageSepiaFilter());
        filter3.setFilter( new GPUImageHueFilter());
        filter4.setFilter( new GPUImageGammaFilter());
        filter5.setFilter( new GPUImageEmbossFilter());
        filter6.setFilter( new GPUImageOpacityFilter());
        filter7.setFilter( new GPUImageMonochromeFilter());


        filter8.setFilter( new GPUImageContrastFilter());
        filter9.setFilter( new GPUImageColorInvertFilter());
        filter10.setFilter( new GPUImagePixelationFilter());
        filter11.setFilter( new GPUImageGrayscaleFilter());
        filter12.setFilter( new GPUImageSharpenFilter());
        filter13.setFilter( new GPUImage3x3ConvolutionFilter());
        filter14.setFilter( new GPUImagePosterizeFilter());
        filter15.setFilter( new GPUImageSaturationFilter());



    }
    public void setBitmaps()
    {
        //get bitmap


        if (mode.equals("gallery"))
        {
            selectedImageBitmap = BitmapFactory.decodeFile(imagePath);
           // if (selectedImageBitmap.getHeight() > selectedImageBitmap.getWidth())
           // {
                selectedImageBitmap = BitmapHelpers.LoadAndResizeBitmap(imagePath, 600, 600);
                CameraObject.bitmap = BitmapHelpers.LoadAndResizeBitmap(imagePath, 400, 400);

           // }
         //   else {
          //      Bitmap bitmap = BitmapFactory.decodeFile(imagePath);
         //       selectedImageBitmap = ImageUtils.RotateImageIfNeeded(bitmap, imagePath);
          //      Bitmap Bitmap1 = BitmapHelpers.LoadAndResizeBitmap(imagePath, 50, 50);
          //      CameraObject.bitmap = ImageUtils.RotateImageIfNeeded(Bitmap1, imagePath);
           // }

        }
        else {
            /*Bitmap bitmap1= createBitmapForCamera(imagePath, selphie);
            selectedImageBitmap =  ImageUtils.RotateImageIfNeededCamera(bitmap1, imagePath);
            Bitmap bitmap2 =
                    BitmapHelpers.LoadAndResizeBitmap(imagePath, 400, 400);
            if (selphie =="True")
            {
                CameraObject.bitmap = selectedImageBitmap;
            }
            else {
                CameraObject.bitmap = ImageUtils.RotateImageIfNeededCamera(bitmap2, imagePath);
            }*/

            //	CameraObject.bitmap = ImageUtils.FlipImage(bitmap3, true, false);

        }




        //// Dispose of the Java side bitmap.
        System.gc();

        //set bitmap
        photo.setImage(selectedImageBitmap);

        filter1.setImage(CameraObject.bitmap);
        filter2.setImage(CameraObject.bitmap);
        filter3.setImage(CameraObject.bitmap);
        filter4.setImage(CameraObject.bitmap);
        filter5.setImage(CameraObject.bitmap);
        filter6.setImage(CameraObject.bitmap);
        filter7.setImage(CameraObject.bitmap);
        filter8.setImage(CameraObject.bitmap);
        filter9.setImage(CameraObject.bitmap);
        filter10.setImage(CameraObject.bitmap);
        filter11.setImage(CameraObject.bitmap);
        filter12.setImage(CameraObject.bitmap);
        filter13.setImage(CameraObject.bitmap);
        filter14.setImage(CameraObject.bitmap);
        filter15.setImage(CameraObject.bitmap);
    }



    @Override
    public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {

    }

    @Override
    public void onStartTrackingTouch(SeekBar seekBar) {

    }

    @Override
    public void onStopTrackingTouch(SeekBar seekBar) {

    }
    private void saveImage()
    {
        //Random rnd = new Random();
        //int rndnumber = rnd.Next();

        File file = new File(getExternalFilesDir(null), "Ten" + "image" + ".JPG");

        String fileName = "rv" + "image" + ".jpg";
        photo.saveToPictures("GPUImage", fileName, this);


        //        mGPUImageView.saveToPictures("GPUImage", fileName, 1600, 1600, this);
    }
    @Override
    public void onPictureSaved(Uri uri) {
        savedfilePath = new File(FileUtils.getPath(this,uri)).getPath();
        progress.cancel();
        //Toast.MakeText(this, "Saved: " + savedfilePath.ToString(), ToastLength.Long).Show();
        finish();
    }


    @Override
    public void onClick(View v) {
        switch (v.getId()){
            case R.id.filter1:
                switchFilterTo(new GPUImageFilter(), 0);
                normal.setTextColor(Color.parseColor("#000000"));
                Sepia.setTextColor(Color.parseColor("#656565"));
                Hue.setTextColor(Color.parseColor("#656565"));
                Gamma.setTextColor(Color.parseColor("#656565"));
                Emboss.setTextColor(Color.parseColor("#656565"));
                Opacity.setTextColor(Color.parseColor("#656565"));
                Chrome.setTextColor(Color.parseColor("#656565"));
                Contrast.setTextColor(Color.parseColor("#656565"));
                Invert.setTextColor(Color.parseColor("#656565"));
                Pixel.setTextColor(Color.parseColor("#656565"));
                Gray.setTextColor(Color.parseColor("#656565"));
                Sharpen.setTextColor(Color.parseColor("#656565"));
                Convolution.setTextColor(Color.parseColor("#656565"));
                Posterize.setTextColor(Color.parseColor("#656565"));
                Saturation.setTextColor(Color.parseColor("#656565"));
            break;
            case R.id.filter2:
                Sepia.setTextColor(Color.parseColor("#000000"));

                switchFilterTo(new GPUImageSepiaFilter(), 50);


                normal.setTextColor(Color.parseColor("#656565"));

                Hue.setTextColor(Color.parseColor("#656565"));
                Gamma.setTextColor(Color.parseColor("#656565"));
                Emboss.setTextColor(Color.parseColor("#656565"));
                Opacity.setTextColor(Color.parseColor("#656565"));
                Chrome.setTextColor(Color.parseColor("#656565"));
                Contrast.setTextColor(Color.parseColor("#656565"));
                Invert.setTextColor(Color.parseColor("#656565"));
                Pixel.setTextColor(Color.parseColor("#656565"));
                Gray.setTextColor(Color.parseColor("#656565"));
                Sharpen.setTextColor(Color.parseColor("#656565"));
                Convolution.setTextColor(Color.parseColor("#656565"));
                Posterize.setTextColor(Color.parseColor("#656565"));
                Saturation.setTextColor(Color.parseColor("#656565"));
                break;
            case R.id.filter3:
                Hue.setTextColor(Color.parseColor("#000000"));

                switchFilterTo(new GPUImageHueFilter(), 45);

                normal.setTextColor(Color.parseColor("#656565"));
                Sepia.setTextColor(Color.parseColor("#656565"));

                Gamma.setTextColor(Color.parseColor("#656565"));
                Emboss.setTextColor(Color.parseColor("#656565"));
                Opacity.setTextColor(Color.parseColor("#656565"));
                Chrome.setTextColor(Color.parseColor("#656565"));
                Contrast.setTextColor(Color.parseColor("#656565"));
                Invert.setTextColor(Color.parseColor("#656565"));
                Pixel.setTextColor(Color.parseColor("#656565"));
                Gray.setTextColor(Color.parseColor("#656565"));
                Sharpen.setTextColor(Color.parseColor("#656565"));
                Convolution.setTextColor(Color.parseColor("#656565"));
                Posterize.setTextColor(Color.parseColor("#656565"));
                Saturation.setTextColor(Color.parseColor("#656565"));
                break;
            case R.id.filter4:
                Gamma.setTextColor(Color.parseColor("#000000"));

                switchFilterTo(new GPUImageGammaFilter(), 60);

                normal.setTextColor(Color.parseColor("#656565"));
                Sepia.setTextColor(Color.parseColor("#656565"));
                Hue.setTextColor(Color.parseColor("#656565"));

                Emboss.setTextColor(Color.parseColor("#656565"));
                Opacity.setTextColor(Color.parseColor("#656565"));
                Chrome.setTextColor(Color.parseColor("#656565"));
                Contrast.setTextColor(Color.parseColor("#656565"));
                Invert.setTextColor(Color.parseColor("#656565"));
                Pixel.setTextColor(Color.parseColor("#656565"));
                Gray.setTextColor(Color.parseColor("#656565"));
                Sharpen.setTextColor(Color.parseColor("#656565"));
                Convolution.setTextColor(Color.parseColor("#656565"));
                Posterize.setTextColor(Color.parseColor("#656565"));
                Saturation.setTextColor(Color.parseColor("#656565"));
                break;
            case R.id.filter5:
                Emboss.setTextColor(Color.parseColor("#000000"));

                switchFilterTo(new GPUImageEmbossFilter(), 30);
                normal.setTextColor(Color.parseColor("#656565"));
                Sepia.setTextColor(Color.parseColor("#656565"));
                Hue.setTextColor(Color.parseColor("#656565"));
                Gamma.setTextColor(Color.parseColor("#656565"));

                Opacity.setTextColor(Color.parseColor("#656565"));
                Chrome.setTextColor(Color.parseColor("#656565"));
                Contrast.setTextColor(Color.parseColor("#656565"));
                Invert.setTextColor(Color.parseColor("#656565"));
                Pixel.setTextColor(Color.parseColor("#656565"));
                Gray.setTextColor(Color.parseColor("#656565"));
                Sharpen.setTextColor(Color.parseColor("#656565"));
                Convolution.setTextColor(Color.parseColor("#656565"));
                Posterize.setTextColor(Color.parseColor("#656565"));
                Saturation.setTextColor(Color.parseColor("#656565"));
                break;
            case R.id.filter6:
                Opacity.setTextColor(Color.parseColor("#000000"));

                switchFilterTo(new GPUImageOpacityFilter(), 50);
                normal.setTextColor(Color.parseColor("#656565"));
                Sepia.setTextColor(Color.parseColor("#656565"));
                Hue.setTextColor(Color.parseColor("#656565"));
                Gamma.setTextColor(Color.parseColor("#656565"));
                Emboss.setTextColor(Color.parseColor("#656565"));

                Chrome.setTextColor(Color.parseColor("#656565"));
                Contrast.setTextColor(Color.parseColor("#656565"));
                Invert.setTextColor(Color.parseColor("#656565"));
                Pixel.setTextColor(Color.parseColor("#656565"));
                Gray.setTextColor(Color.parseColor("#656565"));
                Sharpen.setTextColor(Color.parseColor("#656565"));
                Convolution.setTextColor(Color.parseColor("#656565"));
                Posterize.setTextColor(Color.parseColor("#656565"));
                Saturation.setTextColor(Color.parseColor("#656565"));
                break;
            case R.id.filter7:
                Chrome.setTextColor(Color.parseColor("#000000"));
                switchFilterTo(new GPUImageMonochromeFilter(), 90);
                normal.setTextColor(Color.parseColor("#656565"));
                Sepia.setTextColor(Color.parseColor("#656565"));
                Hue.setTextColor(Color.parseColor("#656565"));
                Gamma.setTextColor(Color.parseColor("#656565"));
                Emboss.setTextColor(Color.parseColor("#656565"));
                Opacity.setTextColor(Color.parseColor("#656565"));

                Contrast.setTextColor(Color.parseColor("#656565"));
                Invert.setTextColor(Color.parseColor("#656565"));
                Pixel.setTextColor(Color.parseColor("#656565"));
                Gray.setTextColor(Color.parseColor("#656565"));
                Sharpen.setTextColor(Color.parseColor("#656565"));
                Convolution.setTextColor(Color.parseColor("#656565"));
                Posterize.setTextColor(Color.parseColor("#656565"));
                Saturation.setTextColor(Color.parseColor("#656565"));
                break;
            case R.id.filter8:
                Contrast.setTextColor(Color.parseColor("#000000"));

                switchFilterTo(new GPUImageContrastFilter(), 60);
                normal.setTextColor(Color.parseColor("#656565"));
                Sepia.setTextColor(Color.parseColor("#656565"));
                Hue.setTextColor(Color.parseColor("#656565"));
                Gamma.setTextColor(Color.parseColor("#656565"));
                Emboss.setTextColor(Color.parseColor("#656565"));
                Opacity.setTextColor(Color.parseColor("#656565"));
                Chrome.setTextColor(Color.parseColor("#656565"));

                Invert.setTextColor(Color.parseColor("#656565"));
                Pixel.setTextColor(Color.parseColor("#656565"));
                Gray.setTextColor(Color.parseColor("#656565"));
                Sharpen.setTextColor(Color.parseColor("#656565"));
                Convolution.setTextColor(Color.parseColor("#656565"));
                Posterize.setTextColor(Color.parseColor("#656565"));
                Saturation.setTextColor(Color.parseColor("#656565"));
                break;
            case R.id.filter9:
                Invert.setTextColor(Color.parseColor("#000000"));

                switchFilterTo(new GPUImageColorInvertFilter(), 50);
                normal.setTextColor(Color.parseColor("#656565"));
                Sepia.setTextColor(Color.parseColor("#656565"));
                Hue.setTextColor(Color.parseColor("#656565"));
                Gamma.setTextColor(Color.parseColor("#656565"));
                Emboss.setTextColor(Color.parseColor("#656565"));
                Opacity.setTextColor(Color.parseColor("#656565"));
                Chrome.setTextColor(Color.parseColor("#656565"));
                Contrast.setTextColor(Color.parseColor("#656565"));

                Pixel.setTextColor(Color.parseColor("#656565"));
                Gray.setTextColor(Color.parseColor("#656565"));
                Sharpen.setTextColor(Color.parseColor("#656565"));
                Convolution.setTextColor(Color.parseColor("#656565"));
                Posterize.setTextColor(Color.parseColor("#656565"));
                Saturation.setTextColor(Color.parseColor("#656565"));
                break;
            case R.id.filter10:
                Pixel.setTextColor(Color.parseColor("#000000"));

                switchFilterTo(new GPUImagePixelationFilter(), 5);

                normal.setTextColor(Color.parseColor("#656565"));
                Sepia.setTextColor(Color.parseColor("#656565"));
                Hue.setTextColor(Color.parseColor("#656565"));
                Gamma.setTextColor(Color.parseColor("#656565"));
                Emboss.setTextColor(Color.parseColor("#656565"));
                Opacity.setTextColor(Color.parseColor("#656565"));
                Chrome.setTextColor(Color.parseColor("#656565"));
                Contrast.setTextColor(Color.parseColor("#656565"));
                Invert.setTextColor(Color.parseColor("#656565"));

                Gray.setTextColor(Color.parseColor("#656565"));
                Sharpen.setTextColor(Color.parseColor("#656565"));
                Convolution.setTextColor(Color.parseColor("#656565"));
                Posterize.setTextColor(Color.parseColor("#656565"));
                Saturation.setTextColor(Color.parseColor("#656565"));
                break;
            case R.id.filter11:
                Gray.setTextColor(Color.parseColor("#000000"));

                switchFilterTo(new GPUImageGrayscaleFilter(), 50);

                normal.setTextColor(Color.parseColor("#656565"));
                Sepia.setTextColor(Color.parseColor("#656565"));
                Hue.setTextColor(Color.parseColor("#656565"));
                Gamma.setTextColor(Color.parseColor("#656565"));
                Emboss.setTextColor(Color.parseColor("#656565"));
                Opacity.setTextColor(Color.parseColor("#656565"));
                Chrome.setTextColor(Color.parseColor("#656565"));
                Contrast.setTextColor(Color.parseColor("#656565"));
                Invert.setTextColor(Color.parseColor("#656565"));
                Pixel.setTextColor(Color.parseColor("#656565"));

                Sharpen.setTextColor(Color.parseColor("#656565"));
                Convolution.setTextColor(Color.parseColor("#656565"));
                Posterize.setTextColor(Color.parseColor("#656565"));
                Saturation.setTextColor(Color.parseColor("#656565"));
                break;
            case R.id.filter12:
                Sharpen.setTextColor(Color.parseColor("#000000"));

                switchFilterTo(new GPUImageSharpenFilter(), 80);

                normal.setTextColor(Color.parseColor("#656565"));
                Sepia.setTextColor(Color.parseColor("#656565"));
                Hue.setTextColor(Color.parseColor("#656565"));
                Gamma.setTextColor(Color.parseColor("#656565"));
                Emboss.setTextColor(Color.parseColor("#656565"));
                Opacity.setTextColor(Color.parseColor("#656565"));
                Chrome.setTextColor(Color.parseColor("#656565"));
                Contrast.setTextColor(Color.parseColor("#656565"));
                Invert.setTextColor(Color.parseColor("#656565"));
                Pixel.setTextColor(Color.parseColor("#656565"));
                Gray.setTextColor(Color.parseColor("#656565"));

                Convolution.setTextColor(Color.parseColor("#656565"));
                Posterize.setTextColor(Color.parseColor("#656565"));
                Saturation.setTextColor(Color.parseColor("#656565"));

                break;
            case R.id.filter13:
                Convolution.setTextColor(Color.parseColor("#000000"));

                switchFilterTo(new GPUImage3x3ConvolutionFilter(), 50);

                normal.setTextColor(Color.parseColor("#656565"));
                Sepia.setTextColor(Color.parseColor("#656565"));
                Hue.setTextColor(Color.parseColor("#656565"));
                Gamma.setTextColor(Color.parseColor("#656565"));
                Emboss.setTextColor(Color.parseColor("#656565"));
                Opacity.setTextColor(Color.parseColor("#656565"));
                Chrome.setTextColor(Color.parseColor("#656565"));
                Contrast.setTextColor(Color.parseColor("#656565"));
                Invert.setTextColor(Color.parseColor("#656565"));
                Pixel.setTextColor(Color.parseColor("#656565"));
                Gray.setTextColor(Color.parseColor("#656565"));
                Sharpen.setTextColor(Color.parseColor("#656565"));

                Posterize.setTextColor(Color.parseColor("#656565"));
                Saturation.setTextColor(Color.parseColor("#656565"));
                break;
            case R.id.filter14:
                Posterize.setTextColor(Color.parseColor("#000000"));

                switchFilterTo(new GPUImagePosterizeFilter(), 10);

                normal.setTextColor(Color.parseColor("#656565"));
                Sepia.setTextColor(Color.parseColor("#656565"));
                Hue.setTextColor(Color.parseColor("#656565"));
                Gamma.setTextColor(Color.parseColor("#656565"));
                Emboss.setTextColor(Color.parseColor("#656565"));
                Opacity.setTextColor(Color.parseColor("#656565"));
                Chrome.setTextColor(Color.parseColor("#656565"));
                Contrast.setTextColor(Color.parseColor("#656565"));
                Invert.setTextColor(Color.parseColor("#656565"));
                Pixel.setTextColor(Color.parseColor("#656565"));
                Gray.setTextColor(Color.parseColor("#656565"));
                Sharpen.setTextColor(Color.parseColor("#656565"));
                Convolution.setTextColor(Color.parseColor("#656565"));

                Saturation.setTextColor(Color.parseColor("#656565"));
                break;
            case R.id.filter15:
                Saturation.setTextColor(Color.parseColor("#000000"));

                switchFilterTo(new GPUImageSaturationFilter(), 50);

                normal.setTextColor(Color.parseColor("#656565"));
                Sepia.setTextColor(Color.parseColor("#656565"));
                Hue.setTextColor(Color.parseColor("#656565"));
                Gamma.setTextColor(Color.parseColor("#656565"));
                Emboss.setTextColor(Color.parseColor("#656565"));
                Opacity.setTextColor(Color.parseColor("#656565"));
                Chrome.setTextColor(Color.parseColor("#656565"));
                Contrast.setTextColor(Color.parseColor("#656565"));
                Invert.setTextColor(Color.parseColor("#656565"));
                Pixel.setTextColor(Color.parseColor("#656565"));
                Gray.setTextColor(Color.parseColor("#656565"));
                Sharpen.setTextColor(Color.parseColor("#656565"));
                Convolution.setTextColor(Color.parseColor("#656565"));
                Posterize.setTextColor(Color.parseColor("#656565"));

                break;
            case R.id.done_btn:
                progress.setIndeterminate(true);
                progress.setProgressStyle(R.style.AdobeImageWidget_ProgressBar);
                progress.setMessage("saving image");
                progress.setCancelable(false);
                progress.show();
                saveImage();


                break;
        }

    }

    public static class BitmapHelpers
    {
        public static Bitmap LoadAndResizeBitmap( String fileName, int width, int height)
        {
            // First we get the the dimensions of the file on disk
            BitmapFactory.Options options = new BitmapFactory.Options (  );//InJustDecodeBounds = true
            BitmapFactory.decodeFile(fileName, options);

            // Next we calculate the ratio that we need to resize the image by
            // in order to fit the requested dimensions.
            int outHeight = options.outHeight;
            int outWidth = options.outWidth;
            int inSampleSize = 1;

            if (outHeight > height || outWidth > width)
            {
                inSampleSize = outWidth > outHeight
                        ? outHeight / height
                        : outWidth / width;
            }

            // Now we will load the image and have BitmapFactory resize it for us.
            options.inSampleSize = inSampleSize;
            options.inJustDecodeBounds = false;
            Bitmap resizedBitmap = BitmapFactory.decodeFile(fileName, options);

            return resizedBitmap;
        }
    }
    public static  class CameraObject{

        public static File _file;
        public static  File _dir;
        public static Bitmap bitmap;
    }
}
