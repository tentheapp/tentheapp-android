package com.nvcomputers.ten.adapter;

import android.content.Context;
import android.media.MediaPlayer;
import android.os.Bundle;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.text.SpannableString;
import android.text.Spanned;
import android.text.method.LinkMovementMethod;
import android.text.style.ClickableSpan;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.VideoView;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.engine.DiskCacheStrategy;
import com.bumptech.glide.signature.StringSignature;
import com.daimajia.swipe.SwipeLayout;
import com.daimajia.swipe.adapters.RecyclerSwipeAdapter;
import com.nvcomputers.ten.R;
import com.nvcomputers.ten.interfaces.AppCommonCallback;
import com.nvcomputers.ten.model.output.DeleteCommentResponse;
import com.nvcomputers.ten.model.output.GetAllPostCommentOutput;
import com.nvcomputers.ten.presenter.DeleteCommentPresenter;
import com.nvcomputers.ten.utils.DateTimeUtil;
import com.nvcomputers.ten.utils.HttpUtils;
import com.nvcomputers.ten.utils.PreferenceKeys;
import com.nvcomputers.ten.utils.SharedPrefsHelper;
import com.nvcomputers.ten.utils.Utilities;
import com.nvcomputers.ten.views.core.BaseFragment;
import com.nvcomputers.ten.views.home.PostDetailActivity;
import com.nvcomputers.ten.views.home.PostDetailFragment;
import com.nvcomputers.ten.views.profile.ProfileFragment;
import com.squareup.picasso.Picasso;

import java.util.ArrayList;

import jp.wasabeef.glide.transformations.RoundedCornersTransformation;
import retrofit2.Call;
import retrofit2.Response;

/**
 * Created by KaurGurleen on 5/3/2017.
 */

public class CommentListAdapter extends RecyclerSwipeAdapter<CommentListAdapter.ViewHolder> {
    private final boolean isMyPost;
    private final String mPostId;

    private ArrayList<GetAllPostCommentOutput.Comments> mList;
    private BaseFragment baseFragment;
    // private CommentsActivity mContext;
    private VideoView currentVideoView;
    private SharedPrefsHelper sharedPrefsHelper;
    private PostDetailFragment postDetailFragment;
    private  PostDetailActivity postDetailActivity;
    Context mContext;

    // private RelativeLayout videoLayout;
    public CommentListAdapter(PostDetailFragment postDetailFragment, ArrayList<?> list, String postId, boolean isMyPost) {
        this.mList = (ArrayList<GetAllPostCommentOutput.Comments>) list;
        //mContext = postDetailFragment.getActivity();
        mPostId = postId;
        this.isMyPost = isMyPost;
        this.postDetailFragment = postDetailFragment;
        this.mContext = postDetailFragment.mContext;
        sharedPrefsHelper = new SharedPrefsHelper(postDetailFragment.getBaseActivity());
    }
    public CommentListAdapter(PostDetailActivity postDetailActivity, ArrayList<?> list, String postId, boolean isMyPost) {
        this.mList = (ArrayList<GetAllPostCommentOutput.Comments>) list;
        //mContext = postDetailFragment.getActivity();
        mPostId = postId;
        this.isMyPost = isMyPost;
        this.postDetailActivity = postDetailActivity;
        this.mContext = postDetailActivity.mContext;
        sharedPrefsHelper = new SharedPrefsHelper(postDetailActivity);
    }
    @Override
    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View itemLayoutView = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.row_comment_list, null);
        CommentListAdapter.ViewHolder viewHolder = new CommentListAdapter.ViewHolder(itemLayoutView);
        itemLayoutView.setTag(viewHolder);
        return viewHolder;
    }


    @Override
    public void onBindViewHolder(ViewHolder holder, int position) {

        GetAllPostCommentOutput.Comments data = mList.get(position);
        String id = data.getUser().getIdUser();
        if (isMyPost || id.equals(sharedPrefsHelper.get(PreferenceKeys.PREF_USER_ID, ""))) {
            holder.swipeLayout.setSwipeEnabled(true);
        } else {
            holder.swipeLayout.setSwipeEnabled(false);
        }
        holder.swipeLayout.setShowMode(SwipeLayout.ShowMode.PullOut);
        // Drag From Right
        holder.swipeLayout.addDrag(SwipeLayout.DragEdge.Right, holder.swipeLayout.findViewById(R.id.bottom_wrapper));

        holder.user_name.setText(data.getUser().getUsername());
        String commentText = data.getText();
        String followingUser = sharedPrefsHelper.get(PreferenceKeys.PREF_FOLLOWING_LIST, "");

        String videoPosterUrl = data.getVideoPosterUrl();
        if (videoPosterUrl != null && videoPosterUrl.length() > 0) {
            holder.playBtn.setVisibility(View.VISIBLE);
            //holder.videoViewPlayer.setVisibility(View.VISIBLE);
            holder.videoLayout.setVisibility(View.VISIBLE);
            holder.video_image.setVisibility(View.VISIBLE);
            Picasso.with(mContext).load(videoPosterUrl).into(holder.video_image);
        } else {
            holder.playBtn.setVisibility(View.GONE);
            holder.videoViewPlayer.setVisibility(View.GONE);
            holder.video_image.setVisibility(View.GONE);
            holder.videoLayout.setVisibility(View.GONE);
            if (commentText != null || commentText.length() > 0) {
                if (followingUser != null && followingUser.length() > 0) {
                    SpannableString styledString = new SpannableString(commentText);
                    String[] parts = followingUser.split(",");
                    for (int i = 0; i < parts.length; i++) {
                        final String taggedName = parts[i];
                        if (commentText.contains(taggedName)) {
                            //
                            // clickable text
                            ClickableSpan clickableSpan = new ClickableSpan() {
                                @Override
                                public void onClick(View widget) {
                                    // Toast.makeText(baseActivity, "Clicked", Toast.LENGTH_SHORT).show();
                                    Bundle bundle = new Bundle();
                                    bundle.putString("username", taggedName);
                                    baseFragment.replaceChildFragment(R.id.single_post_layout, new ProfileFragment(), bundle);
                                    //getFragmentManager().beginTransaction().replace(R.id.single_post_layout, new ProfileFragment()).addToBackStack("").commit();
                                }
                            };
                            int startIndex = commentText.indexOf(taggedName);
                            int endIndex = startIndex + taggedName.length();
                            styledString.setSpan(clickableSpan, startIndex, endIndex, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
                            holder.comment.setText(styledString);
                            holder.comment.setMovementMethod(LinkMovementMethod.getInstance());
                        } else {
                            holder.comment.setText(commentText);
                        }
                    }
                } else {
                    holder.comment.setText(commentText);
                }
            }
        }
        // holder.comment.setText(mList.get(position).getText());
        holder.time.setText(DateTimeUtil.getElapseTimeInMinutes(data.getDatestamp()));

        try {
            if (currentVideoView != null)//&& currentVideoView.IsPlaying
            {
                currentVideoView.stopPlayback();
                currentVideoView.setVisibility(View.GONE);//Visibility = ViewStates.Gone;
                currentVideoView = null;
            }
        } catch (Exception ex) {
            Log.d("--", "-ex-" + ex);
        }

        //holder.profile_image.mList.get(position).getUser().getImageSrc()
        String imageTag = sharedPrefsHelper.get(PreferenceKeys.PREF_IMAGE_TAG, "");
        Glide.with(mContext)
                .load(HttpUtils.getProfileImageURL(data.getUser().getUsername()))
                .bitmapTransform(new RoundedCornersTransformation(mContext, 20, 15))
                .error(R.drawable.myprofilelarge)
                .placeholder(R.drawable.myprofilelarge)
                .diskCacheStrategy(DiskCacheStrategy.RESULT)
                .signature(new StringSignature(imageTag))
                .into(holder.profile_image);
    }

    @Override
    public int getItemCount() {
        if (mList != null) {
            return mList == null ? 0 : mList.size();
        } else {
            return 0;
        }
    }

    @Override
    public int getSwipeLayoutResourceId(int position) {
        return R.id.swipe;
    }

    public void refreshTime(LinearLayoutManager manager) {
        try {
            int firstItemPos = manager.findFirstVisibleItemPosition();
            int lastItemPos = manager.findLastVisibleItemPosition();
            while (firstItemPos <= lastItemPos) {
                View view = manager.findViewByPosition(firstItemPos);
                CommentListAdapter.ViewHolder holder = (CommentListAdapter.ViewHolder) view.getTag();
                updateTimeData(holder, firstItemPos);
                firstItemPos++;
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void updateTimeData(CommentListAdapter.ViewHolder holder, int pos) {
        GetAllPostCommentOutput.Comments data = mList.get(pos);
        holder.time.setText(DateTimeUtil.getElapseTimeInMinutes(data.getDatestamp()));
    }


    public class ViewHolder extends RecyclerView.ViewHolder implements MediaPlayer.OnPreparedListener, View.OnClickListener, AppCommonCallback, DeleteCommentPresenter.DeleteCommentCallback {

        private final SwipeLayout swipeLayout;
        private final Button mDeleteBtn;
        private ImageView profile_image, video_image;
        private TextView user_name;
        private TextView comment;
        private TextView time;
        private VideoView videoViewPlayer;
        private ImageView playBtn;
        private RelativeLayout videoLayout;

        public ViewHolder(View itemView) {
            super(itemView);
            swipeLayout = (SwipeLayout) itemView.findViewById(R.id.swipe);
            profile_image = (ImageView) itemView.findViewById(R.id.profile_image);
            video_image = (ImageView) itemView.findViewById(R.id.video_image);
            videoViewPlayer = (VideoView) itemView.findViewById(R.id.video_view);
            playBtn = (ImageView) itemView.findViewById(R.id.playBtn1);
            user_name = (TextView) itemView.findViewById(R.id.user_name);
            comment = (TextView) itemView.findViewById(R.id.comment);
            time = (TextView) itemView.findViewById(R.id.time);
            videoLayout = (RelativeLayout) itemView.findViewById(R.id.videoLayout);
            mDeleteBtn = (Button) itemView.findViewById(R.id.btn_delete_comment);
            mDeleteBtn.setOnClickListener(this);
            playBtn.setOnClickListener(this);

        }

        @Override
        public void onClick(View view) {
            switch (view.getId()) {
                case R.id.btn_delete_comment:
                    int clickedPosition = getLayoutPosition();
                    String commentId = mList.get(clickedPosition).getIdComment();
                    DeleteCommentPresenter deleteCommentPresenter = new DeleteCommentPresenter(this, this);
                    deleteCommentPresenter.responseCheck(mPostId, commentId);
                    break;

                case R.id.playBtn1:
                    int clickedPosition1 = getLayoutPosition();
                    playVideo(mList.get(clickedPosition1).getVideoUrl(), videoViewPlayer);
                    break;
            }
        }

        private void playVideo(String url, VideoView videoView) {
            try {
                Log.d("", "" + url);
                if (currentVideoView != null)//&& currentVideoView.IsPlaying
                {
                    currentVideoView.stopPlayback();
                    currentVideoView.setVisibility(View.GONE);//Visibility = ViewStates.Gone;
                    currentVideoView = null;
                    //notifyDataSetChanged();
                }
                // videoRelative.setVisibility(View.VISIBLE);//;Visibility = ViewStates.Visible;
                videoLayout.setVisibility(View.VISIBLE);
                videoView.setVisibility(View.VISIBLE);
                //video_image.setVisibility(View.INVISIBLE);
                playBtn.setVisibility(View.GONE);
                currentVideoView = videoView;
                //currentVideoView.setOnPreparedListener(this);
                currentVideoView.setVideoPath(url);
                currentVideoView.requestFocus();
                currentVideoView.start();
                currentVideoView.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                    @Override
                    public void onCompletion(MediaPlayer mp) {
                        currentVideoView.setVisibility(View.GONE);//Visibility = ViewStates.Gone;
                        currentVideoView = null;
                        //mMaster.refresh(pos);
                        notifyDataSetChanged();
                    }
                });
                //currentVideoView.seton
            } catch (Exception exp) {
                Log.d("--->", "--->" + exp);
            }
        }

        @Override
        public void setProgressBar() {

        }

        @Override
        public void dismiss() {

        }

        @Override
        public void deleteCommentError(Call<DeleteCommentResponse> call, Throwable t) {
            Utilities.showMessage(mContext, postDetailFragment.getBaseActivity().getString(R.string.server_error_msg));
        }

        @Override
        public void onDeleteCommentSuccess(Response<DeleteCommentResponse> response) {
            DeleteCommentResponse body = response.body();
            if (body != null) {
                String success = body.getSuccess();
                if (success.equals("true")) {
                    if (postDetailFragment!=null){
                        postDetailFragment.hitCommentApi();
                    }else {
                        postDetailActivity.hitCommentApi();
                    }
                } else {
                    Utilities.showMessage(mContext, postDetailFragment.getBaseActivity().getString(R.string.server_error_msg));
                }
            } else {
                Utilities.showMessage(mContext, postDetailFragment.getBaseActivity().getString(R.string.server_error_msg));
            }
        }

        @Override
        public void onPrepared(MediaPlayer mp) {

        }
    }
}
