/*
package com.nvcomputers.ten.utils;

import android.app.Activity;
import android.content.Context;
import android.util.Log;

import com.google.android.gcm.GCMRegistrar;

import java.io.IOException;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Random;

public final class ServerUtilities {

    Context context;
    Activity activity;
    private static String body;
    private static final int MAX_ATTEMPTS = 5;
    private static final int BACKOFF_MILLI_SECONDS = 2000;
    private static final Random random = new Random();
   
    public ServerUtilities(Activity act, Context con, String reg_id) {
        activity = act;
        context = con;
        body = reg_id;
    }

    public static boolean register(final Context context, final String regId){
        //String serverUrl = GCMUtilities.SERVER_URL + "/register";
        Map<String, String> params = new HashMap<String, String>(); 
        params.put("regId", regId);
        long backoff = BACKOFF_MILLI_SECONDS + random.nextInt(1000);
        // Once GCM returns a registration id, we need to register it in the
        // demo server. As the server might be down, we will retry it a couple
        // times.
        for (int i = 1; i <= MAX_ATTEMPTS; i++)
        {
            //Utilities.showDLog(GCMUtilities.TAG, "Attempt #" + i + " to register");
            try
            {
                //GCMUtilities.displayMessage(context, context.getString(R.string.server_registering, i, MAX_ATTEMPTS));
                 //post(serverUrl, params);
                GCMRegistrar.setRegisteredOnServer(context, true);
                String message = "Server Registered";
                GCMUtilities.displayMessage(context, message);
                return true;
            }
            catch (Exception e)
            {
                // Here we are simplifying and retrying on any error; in a real
                // application, it should retry only on unrecoverable errors
                // (like HTTP error code 503).
                Log.e(GCMUtilities.TAG, "Failed to register on attempt " + i, e); 
                if (i == MAX_ATTEMPTS)
                {
                    break;
                }
                try
                {
                    //Utilities.showDLog(GCMUtilities.TAG, "Sleeping for " + backoff + " ms before retry");
                    Thread.sleep(backoff);
                }
                catch (InterruptedException e1)
                {
                    // Activity finished before we complete - exit.
                    //Utilities.showDLog(GCMUtilities.TAG, "Thread interrupted: abort remaining retries!");
                    Thread.currentThread().interrupt();
                    return false;
                }
                // increase backoff exponentially
                backoff *= 2;
            }
        }

        //String message = context.getString(R.string.server_register_error, MAX_ATTEMPTS);
        //GCMUtilities.displayMessage(context, message);
        return false;
    }

    */
/**
     * Unregister this account/device pair within the server.
     *//*

    public static void unregister(final Context context, final String regId)
    {
        Log.i(GCMUtilities.TAG, "unregistering device (regId = " + regId + ")");
       // String serverUrl = GCMUtilities.SERVER_URL + "/unregister";
        Map<String, String> params = new HashMap<String, String>();
        params.put("regId", regId);
        try
        {
            // post(serverUrl, params);
            GCMRegistrar.setRegisteredOnServer(context, false);
            String message ="Unresgistered";
            GCMUtilities.displayMessage(context, message);
        }
        catch (Exception e)
        {
            // At this point the device is unregistered from GCM, but still
            // registered in the server.
            // We could try to unregister again, but it is not necessary:
            // if the server tries to send a message to the device, it will get
            // a "NotRegistered" error message and should unregister the device.
                //String message = context.getString(R.string.server_unregister_error, e.getMessage());
                //GCMUtilities.displayMessage(context, message);
        }
    }

    */
/**
     * Issue a POST request to the server.
     * 
     * @param endpoint
     *            POST address.
     * @param params
     *            request parameters.
     * 
     * @throws IOException
     *             propagated from POST.
     *//*

    private static void post(String endpoint, Map<String, String> params) throws IOException
    {
        URL url;
        try
        {
            url = new URL(endpoint);
        }
        catch (MalformedURLException e)
        {
            throw new IllegalArgumentException("invalid url: " + endpoint);
        }
        StringBuilder bodyBuilder = new StringBuilder();
        Iterator<Entry<String, String>> iterator = params.entrySet().iterator();
        // constructs the POST body using the parameters
        while (iterator.hasNext())
        {
            Entry<String, String> param = iterator.next();
            bodyBuilder.append(param.getKey()).append('=').append(param.getValue());
            if (iterator.hasNext())
            {
                bodyBuilder.append('&');
            }
        }
        body = bodyBuilder.toString();
        //Utilities.showVLog(GCMUtilities.TAG, "Posting '" + body + "' to " + url);
        byte[] bytes = body.getBytes();
        HttpURLConnection conn = null;
        try
        {
            conn = (HttpURLConnection) url.openConnection();
            conn.setDoOutput(true);
            conn.setUseCaches(false);
            conn.setFixedLengthStreamingMode(bytes.length);
            conn.setRequestMethod("POST");
            conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");
            // post the request
            OutputStream out = conn.getOutputStream();
            out.write(bytes);
            out.close();
            // handle the response
            int status = conn.getResponseCode();
            if (status != 200)
            {
                throw new IOException("Post failed with error code " + status);
            }
        }
        finally
        {
            if (conn != null)
            {
                conn.disconnect();
            }
        }
    }
}
*/
