package com.nvcomputers.ten.views.home;

import android.content.Intent;
import android.support.v4.app.Fragment;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.View;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.engine.DiskCacheStrategy;
import com.bumptech.glide.signature.StringSignature;
import com.google.gson.Gson;
import com.nvcomputers.ten.R;
import com.nvcomputers.ten.adapter.NewsPostAdapter;
import com.nvcomputers.ten.interfaces.AppCommonCallback;
import com.nvcomputers.ten.model.output.NewsFeedOutput;
import com.nvcomputers.ten.presenter.NewFeedPresenter;
import com.nvcomputers.ten.utils.DateTimeUtil;
import com.nvcomputers.ten.utils.HttpUtils;
import com.nvcomputers.ten.utils.PreferenceKeys;
import com.nvcomputers.ten.utils.ProgressUtility;
import com.nvcomputers.ten.utils.SharedPrefsHelper;
import com.nvcomputers.ten.utils.Utilities;
import com.nvcomputers.ten.views.core.BaseFragment;
import com.nvcomputers.ten.views.search.SearchFragment;

import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;

import jp.wasabeef.glide.transformations.RoundedCornersTransformation;
import retrofit2.Call;
import retrofit2.Response;

/**
 * A simple {@link Fragment} subclass.
 * Activities that contain this fragment must implement the
 * to handle interaction events.
 * create an instance of this fragment.
 */
public class PostListFragment extends BaseFragment implements View.OnClickListener, AppCommonCallback,
        NewFeedPresenter.NewsFeedCallback {

    private RelativeLayout user_badge_layout;
    private RecyclerView recyclerViewPosts;
    private ImageView btnDrawerAnimation;
    private ImageView userimage;
    private ImageButton refresh_bttn;
    private SwipeRefreshLayout swipeRefreshLayout;
    private ArrayList<NewsFeedOutput.Posts> newsFeedOutput;
    private Timer timer;
    private NewsPostAdapter adapter;
    private SharedPrefsHelper sharedPref;
    private BaseFragment baseFrament;
    private ProgressBar progress_main;
    int lastSavedPosition = 0;
    boolean noMoreData = false;
    int currentPageNumber = 1;
    private LinearLayoutManager manager;
    private TextView topTimeTextView;

    @Override
    public void onHiddenChanged(boolean hidden) {
        super.onHiddenChanged(hidden);
        if (hidden) {
            //do when hidden
            //Toast.makeText(getBaseActivity(), "PostList--Hide", Toast.LENGTH_LONG).show();
        } else {
            //do when show
            //Toast.makeText(getBaseActivity(), "PostList--Show", Toast.LENGTH_LONG).show();
        }
    }

    @Override
    protected int getLayoutId() {
        return R.layout.fragment_post_list;
    }

    @Override
    protected void initViews(View view) {

        sharedPref = new SharedPrefsHelper(mContext);
        progress_main = (ProgressBar) view.findViewById(R.id.progress_main);
        btnDrawerAnimation = (ImageView) view.findViewById(R.id.btnWindowAnimation);
        btnDrawerAnimation.setOnClickListener(this);
        refresh_bttn = (ImageButton) view.findViewById(R.id.refresh_bttn);
        refresh_bttn.setOnClickListener(this);
        user_badge_layout = (RelativeLayout) view.findViewById(R.id.user_badge_layout);
        // user_badge_layout.setVisibility(View.VISIBLE);
        userimage = (ImageView) view.findViewById(R.id.userimage);
        TextView username = (TextView) view.findViewById(R.id.username);
        topTimeTextView = (TextView) view.findViewById(R.id.toptime);
        String usernameStr = sharedPref.get(PreferenceKeys.PREF_USER_NAME, "");
        username.setText(usernameStr);
        String imageTag = sharedPref.get(PreferenceKeys.PREF_IMAGE_TAG, "");
        Glide.with(mContext)
                .load(HttpUtils.getProfileImageURL(usernameStr))
                .bitmapTransform(new RoundedCornersTransformation(mContext, 10, 10))
                .error(R.drawable.myprofilelarge)
                .placeholder(R.drawable.myprofilelarge)
                .diskCacheStrategy(DiskCacheStrategy.RESULT)
                .signature(new StringSignature(imageTag))
                .into(userimage);
        swipeRefreshLayout = (SwipeRefreshLayout) view.findViewById(R.id.swipeRefreshLayout);
        swipeRefreshLayout.setVisibility(View.GONE);
        swipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
            @Override
            public void onRefresh() {
                loadPaginationData(0);
            }
        });
        recyclerViewPosts = (RecyclerView) view.findViewById(R.id.recyclerViewPosts);
        manager = new LinearLayoutManager(mContext);
        recyclerViewPosts.setLayoutManager(manager);
        findViewById(R.id.post_search).setOnClickListener(this);
        findViewById(R.id.home_frame_layout);
        loadData("");
        baseFrament = this;
    }

    @Override
    public void onStart() {
        super.onStart();
        Log.e("PostList--", "onStart");

    }

    public void loadData(String postId) {
        String result = sharedPref.get(PreferenceKeys.PREF_HOME_PAGE_DATA, "");
        if (result != null && result.length() > 0) {
            Gson gson = new Gson();
            NewsFeedOutput data = gson.fromJson(result, NewsFeedOutput.class);
            if (data != null && data.getPosts() != null && data.getPosts().size() > 0) {
                ArrayList<NewsFeedOutput.Posts> offlinePostList = data.getPosts();
                newsFeedOutput = new ArrayList<>();
                for (int i = 0; i < offlinePostList.size(); i++) {
                    NewsFeedOutput.Posts offlineData = offlinePostList.get(i);
                    if (!DateTimeUtil.checkExpiration(offlineData.getExpiration()) && !offlineData.getIdPost().equals(postId)) {
                        newsFeedOutput.add(offlinePostList.get(i));
                    }
                }
                data.setPosts(newsFeedOutput);
                String jsonBody = gson.toJson(data, NewsFeedOutput.class);
                sharedPref.save(PreferenceKeys.PREF_HOME_PAGE_DATA, jsonBody);
                if (newsFeedOutput.size() == 0) {
                    loadPaginationData(0);
                } else {
                    handleBody(data, false);
                }
            } else {
                loadPaginationData(0);
            }
        } else {
            loadPaginationData(0);
        }

    }

    public void loadPaginationData(int listCount) {
        if (listCount == 0) {
            currentPageNumber = 1;
            lastSavedPosition = 0;
            noMoreData = false;
            newsFeedOutput = new ArrayList<>();
           /* adapter = new NewsPostAdapter(this, newsFeedOutput, R.id.home_frame_layout, manager);
            adapter.isOnline(true);
            recyclerViewPosts.setAdapter(adapter);*/
            hitApi(listCount);
        } else {
            lastSavedPosition = listCount - 1;
            if (listCount >= 10 && !noMoreData && listCount % 10 == 0) {
                int value = listCount / 10;
                currentPageNumber = value + 1;
                hitApi(listCount);
            } else {
                ProgressUtility.dismissProgress();
            }
        }
    }

    boolean isLoading = false;

    private void hitApi(int listCount) {
        if (!Utilities.checkInternet(this.getActivity())) {
            showToast(R.string.no_internet_msg);
        } else {
            if (!isLoading) {
                isLoading = true;
                NewFeedPresenter presenter = new NewFeedPresenter(this, this);
                presenter.hitApi(listCount + "");
            }
        }
    }

    @Override
    public void dispose() {
        cancelTimer();
    }


    @Override
    public void onClick(View v) {

        switch (v.getId()) {
            case R.id.post_search:
                replaceChildFragment(R.id.home_frame_layout, new SearchFragment(), null);
                break;
            case R.id.btnWindowAnimation:
                Intent intent = new Intent(mContext, TimedPostActivity.class);
                startActivity(intent);
                break;
            case R.id.refresh_bttn:
                loadPaginationData(0);
                break;
        }
    }

    @Override
    public void setProgressBar() {
        //showDialog();
        progress_main.setVisibility(View.VISIBLE);
    }

    @Override
    public void dismiss() {
        //hideDialog();
        progress_main.setVisibility(View.GONE);
    }

    @Override
    public void onError(Call<NewsFeedOutput> call, Throwable t) {
        //hideDialog();
        progress_main.setVisibility(View.GONE);
        swipeRefreshLayout.setRefreshing(false);
    }

    @Override
    public void onSuccess(Response<NewsFeedOutput> response) {
        swipeRefreshLayout.setRefreshing(false);
        isLoading = false;
        if (response != null) {
            NewsFeedOutput body = response.body();
            if (body != null) {
                cancelTimer();
                handleBody(body, true);
            }
        }
    }

    private void handleBody(final NewsFeedOutput body, boolean isOnline) {
        ArrayList<NewsFeedOutput.Posts> posts = body.getPosts();
        if (newsFeedOutput == null || !isOnline) {
            newsFeedOutput = new ArrayList<>();
            newsFeedOutput.clear();
        }
        if (posts != null && posts.size() > 0) {
            newsFeedOutput.addAll(posts);
            //newsFeedOutput = posts;
            user_badge_layout.setVisibility(View.GONE);
            swipeRefreshLayout.setVisibility(View.VISIBLE);
            adapter = new NewsPostAdapter(this, newsFeedOutput, R.id.home_frame_layout, manager);
            adapter.isOnline(isOnline);
            recyclerViewPosts.setAdapter(adapter);
            recyclerViewPosts.scrollToPosition(lastSavedPosition);

            if (isOnline) {
                body.setPosts(newsFeedOutput);
                Gson gson = new Gson();
                String jsonBody = gson.toJson(body, NewsFeedOutput.class);
                sharedPref.save(PreferenceKeys.PREF_HOME_PAGE_DATA, jsonBody);
            }
        } else {
            noMoreData = true;
            user_badge_layout.setVisibility(View.VISIBLE);
            swipeRefreshLayout.setVisibility(View.GONE);
        }
        cancelTimer();
        timer = new Timer();
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                checkPostExpiration(body);
            }
        }, 10000, 10000);
    }


    private void checkPostExpiration(final NewsFeedOutput body) {
        if (adapter == null) {
            return;
        }
        final ArrayList<NewsFeedOutput.Posts> postList = adapter.getPostList();
        newsFeedOutput = postList;

        activity.runOnUiThread(new Runnable() {
            @Override
            public void run() {
                try {
                    //View child = manager.getChildAt(0);
                    adapter.updateList(postList);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    @Override
    public void reLoadList() {
        super.reLoadList();
        loadPaginationData(0);
    }

    private void cancelTimer() {
        if (timer != null) {
            try {
                timer.cancel();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    @Override
    public void notifyList(int position) {
        newsFeedOutput.get(position).setLiked(true);
    }

    public void scrollUp() {
        int visibleItem = -1;
        if (linearLayoutManager != null) {
            visibleItem = linearLayoutManager.findLastVisibleItemPosition();
        }

        if (adapter != null && adapter.getItemCount() > 1 && visibleItem != 0) {
            recyclerViewPosts.smoothScrollToPosition(0);
        }
    }

    public void updateUI(ArrayList<NewsFeedOutput.Posts> postList) {
        newsFeedOutput = postList;
        user_badge_layout.setVisibility(View.VISIBLE);
        swipeRefreshLayout.setVisibility(View.GONE);
    }
}
